{"version":3,"sources":["skylark-popper.js"],"names":["define","skylark","isBrowser","window","document","longerTimeoutBrowsers","timeoutDuration","i","length","navigator","userAgent","indexOf","supportsMicroTasks","Promise","debounce","fn","called","resolve","then","scheduled","setTimeout","isFunction","functionToCheck","toString","call","getStyleComputedProperty","element","property","nodeType","ownerDocument","defaultView","css","getComputedStyle","getParentNode","nodeName","parentNode","host","getScrollParent","body","_getStyleComputedProp","overflow","overflowX","overflowY","test","isIE11","MSInputMethodContext","documentMode","isIE10","isIE","version","getOffsetParent","documentElement","noOffsetParent","offsetParent","nextElementSibling","getRoot","node","findCommonOffsetParent","element1","element2","order","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","start","end","range","createRange","setStart","setEnd","commonAncestorContainer","contains","firstElementChild","isOffsetContainer","element1root","getScroll","side","arguments","undefined","upperSide","html","scrollingElement","getBordersSize","styles","axis","sideA","sideB","parseFloat","getSize","computedStyle","Math","max","parseInt","getWindowSizes","height","width","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","obj","value","_extends","assign","source","hasOwnProperty","getClientRect","offsets","right","left","bottom","top","getBoundingClientRect","rect","scrollTop","scrollLeft","e","result","sizes","clientWidth","clientHeight","horizScrollbar","offsetWidth","vertScrollbar","offsetHeight","getOffsetRectRelativeToArbitraryNode","children","parent","fixedPosition","isHTML","childrenRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","subtract","modifier","includeScroll","getFixedPositionOffsetParent","parentElement","el","getBoundaries","popper","reference","padding","boundariesElement","boundaries","excludeScroll","relativeOffset","innerWidth","innerHeight","getViewportOffsetRectRelativeToArtbitraryNode","boundariesNode","isFixed","_getWindowSizes","isPaddingNumber","computeAutoPlacement","placement","refRect","rects","sortedAreas","keys","map","area","_ref","sort","a","b","filteredAreas","filter","_ref2","computedPlacement","variation","split","getReferenceOffsets","state","commonOffsetParent","getOuterSizes","x","marginBottom","y","marginRight","getOppositePlacement","hash","replace","matched","getPopperOffsets","referenceOffsets","popperRect","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","find","arr","check","Array","runModifiers","modifiers","data","ends","modifiersToRun","slice","prop","findIndex","cur","match","forEach","console","warn","enabled","isModifierEnabled","modifierName","some","name","getSupportedPropertyName","prefixes","upperProp","charAt","toUpperCase","prefix","toCheck","style","getWindow","setupEventListeners","options","updateBound","addEventListener","passive","scrollElement","attachToScrollParents","event","callback","scrollParents","isBody","push","eventsEnabled","disableEventListeners","this","cancelAnimationFrame","scheduleUpdate","removeEventListener","isNumeric","n","isNaN","isFinite","setStyles","unit","isFirefox","isModifierRequired","requestingName","requestedName","requesting","isRequired","_requesting","requested","placements","validPlacements","clockwise","counter","index","concat","reverse","BEHAVIORS","FLIP","CLOCKWISE","COUNTERCLOCKWISE","parseOffset","offset","basePlacement","useHeight","fragments","frag","trim","divider","search","splitRegex","ops","op","mergeWithPrevious","reduce","str","toValue","index2","shift","shiftvariation","_data$offsets","isVertical","shiftOffsets","preventOverflow","transformProp","popperStyles","transform","positionFixed","priority","primary","escapeWithReference","secondary","min","keepTogether","floor","opSide","arrow","_data$offsets$arrow","arrowElement","querySelector","len","sideCapitalized","toLowerCase","altSide","arrowElementSize","center","popperMarginSide","popperBorderSide","sideValue","round","flip","flipped","originalPlacement","placementOpposite","flipOrder","behavior","step","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariation","flipVariations","getOppositeVariation","inner","subtractLength","hide","bound","attributes","computeStyle","legacyGpuAccelerationOption","gpuAcceleration","offsetParentRect","position","shouldRound","isVariation","sameWidthOddness","bothOddWidth","noRound","v","horizontalToInteger","verticalToInteger","getRoundedOffsets","devicePixelRatio","prefixedProperty","willChange","invertTop","invertLeft","x-placement","arrowStyles","applyStyle","setAttribute","removeAttribute","onLoad","modifierOptions","Defaults","removeOnDestroy","onCreate","onUpdate","Popper","_this","requestAnimationFrame","update","bind","isDestroyed","isCreated","jquery","enableEventListeners","removeChild","Utils","global","PopperUtils","ui","main"],"mappings":";;;;;;;+zBAAAA,EAAA,yBACA,yBACA,SAAAC,GACA,aAKA,IAHA,IAAAC,EAAA,oBAAAC,QAAA,oBAAAC,SACAC,GAAA,OAAA,UAAA,WACAC,EAAA,EACAC,EAAA,EAAAA,EAAAF,EAAAG,OAAAD,GAAA,EACA,GAAAL,GAAAO,UAAAC,UAAAC,QAAAN,EAAAE,KAAA,EAAA,CACAD,EAAA,EACA,MA+BA,IAAAM,EAAAV,GAAAC,OAAAU,QAWAC,EAAAF,EAtCA,SAAAG,GACA,IAAAC,GAAA,EACA,OAAA,WACAA,IAGAA,GAAA,EACAb,OAAAU,QAAAI,UAAAC,KAAA,WACAF,GAAA,EACAD,SAKA,SAAAA,GACA,IAAAI,GAAA,EACA,OAAA,WACAA,IACAA,GAAA,EACAC,WAAA,WACAD,GAAA,EACAJ,KACAT,MAyBA,SAAAe,EAAAC,GAEA,OAAAA,GAAA,yBAAAC,SAAAC,KAAAF,GAUA,SAAAG,EAAAC,EAAAC,GACA,GAAA,IAAAD,EAAAE,SACA,SAGA,IAAAzB,EAAAuB,EAAAG,cAAAC,YACAC,EAAA5B,EAAA6B,iBAAAN,EAAA,MAhFA,OAAAC,EAAAI,EAAAJ,GAAAI,EAUA,SAAAE,EAAAP,GACA,MAAA,SAAAA,EAAAQ,SACAR,EAEAA,EAAAS,YAAAT,EAAAU,KAUA,SAAAC,EAAAX,GAEA,IAAAA,EACA,OAAAtB,SAAAkC,KAGA,OAAAZ,EAAAQ,UACA,IAAA,OACA,IAAA,OACA,OAAAR,EAAAG,cAAAS,KACA,IAAA,YACA,OAAAZ,EAAAY,KAKA,IAAAC,EAAAd,EAAAC,GACAc,EAAAD,EAAAC,SACAC,EAAAF,EAAAE,UACAC,EAAAH,EAAAG,UAEA,MAAA,wBAAAC,KAAAH,EAAAE,EAAAD,GACAf,EAGAW,EAAAJ,EAAAP,IAGA,IAAAkB,EAAA1C,MAAAC,OAAA0C,uBAAAzC,SAAA0C,cACAC,EAAA7C,GAAA,UAAAyC,KAAAlC,UAAAC,WASA,SAAAsC,EAAAC,GACA,OAAA,KAAAA,EACAL,EAEA,KAAAK,EACAF,EAEAH,GAAAG,EAUA,SAAAG,EAAAxB,GACA,IAAAA,EACA,OAAAtB,SAAA+C,gBAQA,IALA,IAAAC,EAAAJ,EAAA,IAAA5C,SAAAkC,KAAA,KAGAe,EAAA3B,EAAA2B,cAAA,KAEAA,IAAAD,GAAA1B,EAAA4B,oBACAD,GAAA3B,EAAAA,EAAA4B,oBAAAD,aAGA,IAAAnB,EAAAmB,GAAAA,EAAAnB,SAEA,OAAAA,GAAA,SAAAA,GAAA,SAAAA,GAMA,KAAA,KAAA,KAAA,SAAAvB,QAAA0C,EAAAnB,WAAA,WAAAT,EAAA4B,EAAA,YACAH,EAAAG,GAGAA,EATA3B,EAAAA,EAAAG,cAAAsB,gBAAA/C,SAAA+C,gBA4BA,SAAAI,EAAAC,GACA,OAAA,OAAAA,EAAArB,WACAoB,EAAAC,EAAArB,YAGAqB,EAWA,SAAAC,EAAAC,EAAAC,GAEA,KAAAD,GAAAA,EAAA9B,UAAA+B,GAAAA,EAAA/B,UACA,OAAAxB,SAAA+C,gBAIA,IAAAS,EAAAF,EAAAG,wBAAAF,GAAAG,KAAAC,4BACAC,EAAAJ,EAAAF,EAAAC,EACAM,EAAAL,EAAAD,EAAAD,EAGAQ,EAAA9D,SAAA+D,cACAD,EAAAE,SAAAJ,EAAA,GACAE,EAAAG,OAAAJ,EAAA,GACA,IAAAK,EAAAJ,EAAAI,wBAIA,GAAAZ,IAAAY,GAAAX,IAAAW,GAAAN,EAAAO,SAAAN,GACA,OApDA,SAAAvC,GACA,IAAAQ,EAAAR,EAAAQ,SAEA,GAAA,SAAAA,EACA,OAAA,EAEA,MAAA,SAAAA,GAAAgB,EAAAxB,EAAA8C,qBAAA9C,EA8CA+C,CAAAH,GACAA,EAGApB,EAAAoB,GAIA,IAAAI,EAAAnB,EAAAG,GACA,OAAAgB,EAAAtC,KACAqB,EAAAiB,EAAAtC,KAAAuB,GAEAF,EAAAC,EAAAH,EAAAI,GAAAvB,MAYA,SAAAuC,EAAAjD,GACA,IAAAkD,EAAAC,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAAA,MAEAE,EAAA,QAAAH,EAAA,YAAA,aACA1C,EAAAR,EAAAQ,SAEA,GAAA,SAAAA,GAAA,SAAAA,EAAA,CACA,IAAA8C,EAAAtD,EAAAG,cAAAsB,gBACA8B,EAAAvD,EAAAG,cAAAoD,kBAAAD,EACA,OAAAC,EAAAF,GAGA,OAAArD,EAAAqD,GAmCA,SAAAG,EAAAC,EAAAC,GACA,IAAAC,EAAA,MAAAD,EAAA,OAAA,MACAE,EAAA,SAAAD,EAAA,QAAA,SAEA,OAAAE,WAAAJ,EAAA,SAAAE,EAAA,SAAA,IAAAE,WAAAJ,EAAA,SAAAG,EAAA,SAAA,IAGA,SAAAE,EAAAJ,EAAA9C,EAAA0C,EAAAS,GACA,OAAAC,KAAAC,IAAArD,EAAA,SAAA8C,GAAA9C,EAAA,SAAA8C,GAAAJ,EAAA,SAAAI,GAAAJ,EAAA,SAAAI,GAAAJ,EAAA,SAAAI,GAAApC,EAAA,IAAA4C,SAAAZ,EAAA,SAAAI,IAAAQ,SAAAH,EAAA,UAAA,WAAAL,EAAA,MAAA,UAAAQ,SAAAH,EAAA,UAAA,WAAAL,EAAA,SAAA,WAAA,GAGA,SAAAS,EAAAzF,GACA,IAAAkC,EAAAlC,EAAAkC,KACA0C,EAAA5E,EAAA+C,gBACAsC,EAAAzC,EAAA,KAAAhB,iBAAAgD,GAEA,OACAc,OAAAN,EAAA,SAAAlD,EAAA0C,EAAAS,GACAM,MAAAP,EAAA,QAAAlD,EAAA0C,EAAAS,IAIA,IAAAO,EAAA,SAAAC,EAAAC,GACA,KAAAD,aAAAC,GACA,MAAA,IAAAC,UAAA,sCAIAC,EAAA,WACA,SAAAC,EAAAC,EAAAC,GACA,IAAA,IAAAhG,EAAA,EAAAA,EAAAgG,EAAA/F,OAAAD,IAAA,CACA,IAAAiG,EAAAD,EAAAhG,GACAiG,EAAAC,WAAAD,EAAAC,aAAA,EACAD,EAAAE,cAAA,EACA,UAAAF,IAAAA,EAAAG,UAAA,GACAC,OAAAC,eAAAP,EAAAE,EAAAM,IAAAN,IAIA,OAAA,SAAAN,EAAAa,EAAAC,GAGA,OAFAD,GAAAV,EAAAH,EAAAe,UAAAF,GACAC,GAAAX,EAAAH,EAAAc,GACAd,GAdA,GAsBAW,EAAA,SAAAK,EAAAJ,EAAAK,GAYA,OAXAL,KAAAI,EACAN,OAAAC,eAAAK,EAAAJ,GACAK,MAAAA,EACAV,YAAA,EACAC,cAAA,EACAC,UAAA,IAGAO,EAAAJ,GAAAK,EAGAD,GAGAE,EAAAR,OAAAS,QAAA,SAAAf,GACA,IAAA,IAAA/F,EAAA,EAAAA,EAAAsE,UAAArE,OAAAD,IAAA,CACA,IAAA+G,EAAAzC,UAAAtE,GAEA,IAAA,IAAAuG,KAAAQ,EACAV,OAAAK,UAAAM,eAAA/F,KAAA8F,EAAAR,KACAR,EAAAQ,GAAAQ,EAAAR,IAKA,OAAAR,GAUA,SAAAkB,EAAAC,GACA,OAAAL,KAAAK,GACAC,MAAAD,EAAAE,KAAAF,EAAA1B,MACA6B,OAAAH,EAAAI,IAAAJ,EAAA3B,SAWA,SAAAgC,EAAApG,GACA,IAAAqG,KAKA,IACA,GAAA/E,EAAA,IAAA,CACA+E,EAAArG,EAAAoG,wBACA,IAAAE,EAAArD,EAAAjD,EAAA,OACAuG,EAAAtD,EAAAjD,EAAA,QACAqG,EAAAF,KAAAG,EACAD,EAAAJ,MAAAM,EACAF,EAAAH,QAAAI,EACAD,EAAAL,OAAAO,OAEAF,EAAArG,EAAAoG,wBAEA,MAAAI,IAEA,IAAAC,GACAR,KAAAI,EAAAJ,KACAE,IAAAE,EAAAF,IACA9B,MAAAgC,EAAAL,MAAAK,EAAAJ,KACA7B,OAAAiC,EAAAH,OAAAG,EAAAF,KAIAO,EAAA,SAAA1G,EAAAQ,SAAA2D,EAAAnE,EAAAG,kBACAkE,EAAAqC,EAAArC,OAAArE,EAAA2G,aAAAF,EAAAT,MAAAS,EAAAR,KACA7B,EAAAsC,EAAAtC,QAAApE,EAAA4G,cAAAH,EAAAP,OAAAO,EAAAN,IAEAU,EAAA7G,EAAA8G,YAAAzC,EACA0C,EAAA/G,EAAAgH,aAAA5C,EAIA,GAAAyC,GAAAE,EAAA,CACA,IAAAtD,EAAA1D,EAAAC,GACA6G,GAAArD,EAAAC,EAAA,KACAsD,GAAAvD,EAAAC,EAAA,KAEAgD,EAAApC,OAAAwC,EACAJ,EAAArC,QAAA2C,EAGA,OAAAjB,EAAAW,GAGA,SAAAQ,EAAAC,EAAAC,GACA,IAAAC,EAAAjE,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,IAAAA,UAAA,GAEA9B,EAAAC,EAAA,IACA+F,EAAA,SAAAF,EAAA3G,SACA8G,EAAAlB,EAAAc,GACAK,EAAAnB,EAAAe,GACAK,EAAA7G,EAAAuG,GAEAzD,EAAA1D,EAAAoH,GACAM,EAAA5D,WAAAJ,EAAAgE,eAAA,IACAC,EAAA7D,WAAAJ,EAAAiE,gBAAA,IAGAN,GAAAC,IACAE,EAAApB,IAAAnC,KAAAC,IAAAsD,EAAApB,IAAA,GACAoB,EAAAtB,KAAAjC,KAAAC,IAAAsD,EAAAtB,KAAA,IAEA,IAAAF,EAAAD,GACAK,IAAAmB,EAAAnB,IAAAoB,EAAApB,IAAAsB,EACAxB,KAAAqB,EAAArB,KAAAsB,EAAAtB,KAAAyB,EACArD,MAAAiD,EAAAjD,MACAD,OAAAkD,EAAAlD,SASA,GAPA2B,EAAA4B,UAAA,EACA5B,EAAA6B,WAAA,GAMAvG,GAAAgG,EAAA,CACA,IAAAM,EAAA9D,WAAAJ,EAAAkE,UAAA,IACAC,EAAA/D,WAAAJ,EAAAmE,WAAA,IAEA7B,EAAAI,KAAAsB,EAAAE,EACA5B,EAAAG,QAAAuB,EAAAE,EACA5B,EAAAE,MAAAyB,EAAAE,EACA7B,EAAAC,OAAA0B,EAAAE,EAGA7B,EAAA4B,UAAAA,EACA5B,EAAA6B,WAAAA,EAOA,OAJAvG,IAAA+F,EAAAD,EAAAtE,SAAA2E,GAAAL,IAAAK,GAAA,SAAAA,EAAAhH,YACAuF,EA1NA,SAAAM,EAAArG,GACA,IAAA6H,EAAA1E,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,IAAAA,UAAA,GAEAmD,EAAArD,EAAAjD,EAAA,OACAuG,EAAAtD,EAAAjD,EAAA,QACA8H,EAAAD,GAAA,EAAA,EAKA,OAJAxB,EAAAF,KAAAG,EAAAwB,EACAzB,EAAAH,QAAAI,EAAAwB,EACAzB,EAAAJ,MAAAM,EAAAuB,EACAzB,EAAAL,OAAAO,EAAAuB,EACAzB,EAgNA0B,CAAAhC,EAAAoB,IAGApB,EAmDA,SAAAiC,EAAAhI,GAEA,IAAAA,IAAAA,EAAAiI,eAAA3G,IACA,OAAA5C,SAAA+C,gBAGA,IADA,IAAAyG,EAAAlI,EAAAiI,cACAC,GAAA,SAAAnI,EAAAmI,EAAA,cACAA,EAAAA,EAAAD,cAEA,OAAAC,GAAAxJ,SAAA+C,gBAcA,SAAA0G,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAnB,EAAAjE,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,IAAAA,UAAA,GAIAqF,GAAArC,IAAA,EAAAF,KAAA,GACAtE,EAAAyF,EAAAY,EAAAI,GAAArG,EAAAqG,EAAAC,GAGA,GAAA,aAAAE,EACAC,EAjFA,SAAAxI,GACA,IAAAyI,EAAAtF,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,IAAAA,UAAA,GAEAG,EAAAtD,EAAAG,cAAAsB,gBACAiH,EAAAzB,EAAAjH,EAAAsD,GACAe,EAAAL,KAAAC,IAAAX,EAAAqD,YAAAlI,OAAAkK,YAAA,GACAvE,EAAAJ,KAAAC,IAAAX,EAAAsD,aAAAnI,OAAAmK,aAAA,GAEAtC,EAAAmC,EAAA,EAAAxF,EAAAK,GACAiD,EAAAkC,EAAA,EAAAxF,EAAAK,EAAA,QASA,OAAAwC,GANAK,IAAAG,EAAAoC,EAAAvC,IAAAuC,EAAAf,UACA1B,KAAAM,EAAAmC,EAAAzC,KAAAyC,EAAAd,WACAvD,MAAAA,EACAD,OAAAA,IAkEAyE,CAAAlH,EAAAyF,OACA,CAEA,IAAA0B,OAAA,EACA,iBAAAP,EAEA,UADAO,EAAAnI,EAAAJ,EAAA8H,KACA7H,WACAsI,EAAAV,EAAAjI,cAAAsB,iBAGAqH,EADA,WAAAP,EACAH,EAAAjI,cAAAsB,gBAEA8G,EAGA,IAAAxC,EAAAkB,EAAA6B,EAAAnH,EAAAyF,GAGA,GAAA,SAAA0B,EAAAtI,UAtEA,SAAAuI,EAAA/I,GACA,IAAAQ,EAAAR,EAAAQ,SACA,GAAA,SAAAA,GAAA,SAAAA,EACA,OAAA,EAEA,GAAA,UAAAT,EAAAC,EAAA,YACA,OAAA,EAEA,OAAA+I,EAAAxI,EAAAP,IA8DA+I,CAAApH,GAWA6G,EAAAzC,MAXA,CACA,IAAAiD,EAAA7E,EAAAiE,EAAAjI,eACAiE,EAAA4E,EAAA5E,OACAC,EAAA2E,EAAA3E,MAEAmE,EAAArC,KAAAJ,EAAAI,IAAAJ,EAAA4B,UACAa,EAAAtC,OAAA9B,EAAA2B,EAAAI,IACAqC,EAAAvC,MAAAF,EAAAE,KAAAF,EAAA6B,WACAY,EAAAxC,MAAA3B,EAAA0B,EAAAE,MASA,IAAAgD,EAAA,iBADAX,EAAAA,GAAA,GAOA,OALAE,EAAAvC,MAAAgD,EAAAX,EAAAA,EAAArC,MAAA,EACAuC,EAAArC,KAAA8C,EAAAX,EAAAA,EAAAnC,KAAA,EACAqC,EAAAxC,OAAAiD,EAAAX,EAAAA,EAAAtC,OAAA,EACAwC,EAAAtC,QAAA+C,EAAAX,EAAAA,EAAApC,QAAA,EAEAsC,EAmBA,SAAAU,EAAAC,EAAAC,EAAAhB,EAAAC,EAAAE,GACA,IAAAD,EAAAnF,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAAA,EAEA,IAAA,IAAAgG,EAAAlK,QAAA,QACA,OAAAkK,EAGA,IAAAX,EAAAL,EAAAC,EAAAC,EAAAC,EAAAC,GAEAc,GACAlD,KACA9B,MAAAmE,EAAAnE,MACAD,OAAAgF,EAAAjD,IAAAqC,EAAArC,KAEAH,OACA3B,MAAAmE,EAAAxC,MAAAoD,EAAApD,MACA5B,OAAAoE,EAAApE,QAEA8B,QACA7B,MAAAmE,EAAAnE,MACAD,OAAAoE,EAAAtC,OAAAkD,EAAAlD,QAEAD,MACA5B,MAAA+E,EAAAnD,KAAAuC,EAAAvC,KACA7B,OAAAoE,EAAApE,SAIAkF,EAAApE,OAAAqE,KAAAF,GAAAG,IAAA,SAAApE,GACA,OAAAM,GACAN,IAAAA,GACAiE,EAAAjE,IACAqE,MAhDAC,EAgDAL,EAAAjE,GA/CAf,EAAAqF,EAAArF,MACAD,EAAAsF,EAAAtF,OAEAC,EAAAD,KAJA,IAAAsF,EACArF,EACAD,IAgDAuF,KAAA,SAAAC,EAAAC,GACA,OAAAA,EAAAJ,KAAAG,EAAAH,OAGAK,EAAAR,EAAAS,OAAA,SAAAC,GACA,IAAA3F,EAAA2F,EAAA3F,MACAD,EAAA4F,EAAA5F,OACA,OAAAC,GAAA+D,EAAAzB,aAAAvC,GAAAgE,EAAAxB,eAGAqD,EAAAH,EAAAhL,OAAA,EAAAgL,EAAA,GAAA1E,IAAAkE,EAAA,GAAAlE,IAEA8E,EAAAf,EAAAgB,MAAA,KAAA,GAEA,OAAAF,GAAAC,EAAA,IAAAA,EAAA,IAaA,SAAAE,EAAAC,EAAAjC,EAAAC,GACA,IAAAjB,EAAAjE,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAAA,KAEAmH,EAAAlD,EAAAY,EAAAI,GAAArG,EAAAqG,EAAAC,GACA,OAAApB,EAAAoB,EAAAiC,EAAAlD,GAUA,SAAAmD,EAAAvK,GACA,IAAAvB,EAAAuB,EAAAG,cAAAC,YACAqD,EAAAhF,EAAA6B,iBAAAN,GACAwK,EAAA3G,WAAAJ,EAAAkE,WAAA,GAAA9D,WAAAJ,EAAAgH,cAAA,GACAC,EAAA7G,WAAAJ,EAAAmE,YAAA,GAAA/D,WAAAJ,EAAAkH,aAAA,GACAlE,GACApC,MAAArE,EAAA8G,YAAA4D,EACAtG,OAAApE,EAAAgH,aAAAwD,GAEA,OAAA/D,EAUA,SAAAmE,EAAAzB,GACA,IAAA0B,GAAA5E,KAAA,QAAAD,MAAA,OAAAE,OAAA,MAAAC,IAAA,UACA,OAAAgD,EAAA2B,QAAA,yBAAA,SAAAC,GACA,OAAAF,EAAAE,KAcA,SAAAC,EAAA5C,EAAA6C,EAAA9B,GACAA,EAAAA,EAAAgB,MAAA,KAAA,GAGA,IAAAe,EAAAX,EAAAnC,GAGA+C,GACA9G,MAAA6G,EAAA7G,MACAD,OAAA8G,EAAA9G,QAIAgH,GAAA,KAAA,QAAA,QAAAnM,QAAAkK,GACAkC,EAAAD,EAAA,MAAA,OACAE,EAAAF,EAAA,OAAA,MACAG,EAAAH,EAAA,SAAA,QACAI,EAAAJ,EAAA,QAAA,SASA,OAPAD,EAAAE,GAAAJ,EAAAI,GAAAJ,EAAAM,GAAA,EAAAL,EAAAK,GAAA,EAEAJ,EAAAG,GADAnC,IAAAmC,EACAL,EAAAK,GAAAJ,EAAAM,GAEAP,EAAAL,EAAAU,IAGAH,EAYA,SAAAM,EAAAC,EAAAC,GAEA,OAAAC,MAAArG,UAAAkG,KACAC,EAAAD,KAAAE,GAIAD,EAAA3B,OAAA4B,GAAA,GAqCA,SAAAE,EAAAC,EAAAC,EAAAC,GACA,IAAAC,OAAA7I,IAAA4I,EAAAF,EAAAA,EAAAI,MAAA,EA1BA,SAAAR,EAAAS,EAAA1G,GAEA,GAAAmG,MAAArG,UAAA6G,UACA,OAAAV,EAAAU,UAAA,SAAAC,GACA,OAAAA,EAAAF,KAAA1G,IAKA,IAAA6G,EAAAb,EAAAC,EAAA,SAAAlG,GACA,OAAAA,EAAA2G,KAAA1G,IAEA,OAAAiG,EAAAzM,QAAAqN,GAcAF,CAAAN,EAAA,OAAAE,IAmBA,OAjBAC,EAAAM,QAAA,SAAAzE,GACAA,EAAA,UAEA0E,QAAAC,KAAA,yDAEA,IAAApN,EAAAyI,EAAA,UAAAA,EAAAzI,GACAyI,EAAA4E,SAAA/M,EAAAN,KAIA0M,EAAAhG,QAAAqC,OAAAtC,EAAAiG,EAAAhG,QAAAqC,QACA2D,EAAAhG,QAAAsC,UAAAvC,EAAAiG,EAAAhG,QAAAsC,WAEA0D,EAAA1M,EAAA0M,EAAAjE,MAIAiE,EA8DA,SAAAY,EAAAb,EAAAc,GACA,OAAAd,EAAAe,KAAA,SAAAnD,GACA,IAAAoD,EAAApD,EAAAoD,KACAJ,EAAAhD,EAAAgD,QACA,OAAAA,GAAAI,IAAAF,IAWA,SAAAG,EAAA9M,GAIA,IAHA,IAAA+M,IAAA,EAAA,KAAA,SAAA,MAAA,KACAC,EAAAhN,EAAAiN,OAAA,GAAAC,cAAAlN,EAAAiM,MAAA,GAEArN,EAAA,EAAAA,EAAAmO,EAAAlO,OAAAD,IAAA,CACA,IAAAuO,EAAAJ,EAAAnO,GACAwO,EAAAD,EAAA,GAAAA,EAAAH,EAAAhN,EACA,QAAA,IAAAvB,SAAAkC,KAAA0M,MAAAD,GACA,OAAAA,EAGA,OAAA,KAsCA,SAAAE,EAAAvN,GACA,IAAAG,EAAAH,EAAAG,cACA,OAAAA,EAAAA,EAAAC,YAAA3B,OAoBA,SAAA+O,EAAAnF,EAAAoF,EAAApD,EAAAqD,GAEArD,EAAAqD,YAAAA,EACAH,EAAAlF,GAAAsF,iBAAA,SAAAtD,EAAAqD,aAAAE,SAAA,IAGA,IAAAC,EAAAlN,EAAA0H,GAKA,OA5BA,SAAAyF,EAAAtG,EAAAuG,EAAAC,EAAAC,GACA,IAAAC,EAAA,SAAA1G,EAAAhH,SACA,IAAAoE,EAAAsJ,EAAA1G,EAAArH,cAAAC,YAAAoH,EACA5C,EAAA+I,iBAAAI,EAAAC,GAAAJ,SAAA,IAEAM,GACAJ,EAAAnN,EAAAiE,EAAAnE,YAAAsN,EAAAC,EAAAC,GAEAA,EAAAE,KAAAvJ,GAgBAkJ,CAAAD,EAAA,SAAAxD,EAAAqD,YAAArD,EAAA4D,eACA5D,EAAAwD,cAAAA,EACAxD,EAAA+D,eAAA,EAEA/D,EA6CA,SAAAgE,IAxBA,IAAAhG,EAAAgC,EAyBAiE,KAAAjE,MAAA+D,gBACAG,qBAAAD,KAAAE,gBACAF,KAAAjE,OA3BAhC,EA2BAiG,KAAAjG,UA3BAgC,EA2BAiE,KAAAjE,MAzBAkD,EAAAlF,GAAAoG,oBAAA,SAAApE,EAAAqD,aAGArD,EAAA4D,cAAA1B,QAAA,SAAA3H,GACAA,EAAA6J,oBAAA,SAAApE,EAAAqD,eAIArD,EAAAqD,YAAA,KACArD,EAAA4D,iBACA5D,EAAAwD,cAAA,KACAxD,EAAA+D,eAAA,EACA/D,IAwBA,SAAAqE,EAAAC,GACA,MAAA,KAAAA,IAAAC,MAAA/K,WAAA8K,KAAAE,SAAAF,GAWA,SAAAG,EAAA9O,EAAAyD,GACAyB,OAAAqE,KAAA9F,GAAA8I,QAAA,SAAAJ,GACA,IAAA4C,EAAA,IAEA,KAAA,QAAA,SAAA,MAAA,QAAA,SAAA,QAAA9P,QAAAkN,IAAAuC,EAAAjL,EAAA0I,MACA4C,EAAA,MAEA/O,EAAAsN,MAAAnB,GAAA1I,EAAA0I,GAAA4C,IA2HA,IAAAC,EAAAxQ,GAAA,WAAAyC,KAAAlC,UAAAC,WA8GA,SAAAiQ,EAAAnD,EAAAoD,EAAAC,GACA,IAAAC,EAAA3D,EAAAK,EAAA,SAAApC,GACA,IAAAoD,EAAApD,EAAAoD,KACA,OAAAA,IAAAoC,IAGAG,IAAAD,GAAAtD,EAAAe,KAAA,SAAA/E,GACA,OAAAA,EAAAgF,OAAAqC,GAAArH,EAAA4E,SAAA5E,EAAA5F,MAAAkN,EAAAlN,QAGA,IAAAmN,EAAA,CACA,IAAAC,EAAA,IAAAJ,EAAA,IACAK,EAAA,IAAAJ,EAAA,IACA3C,QAAAC,KAAA8C,EAAA,4BAAAD,EAAA,4DAAAA,EAAA,KAEA,OAAAD,EAoIA,IAAAG,GAAA,aAAA,OAAA,WAAA,YAAA,MAAA,UAAA,cAAA,QAAA,YAAA,aAAA,SAAA,eAAA,WAAA,OAAA,cAGAC,EAAAD,EAAAtD,MAAA,GAYA,SAAAwD,EAAAvG,GACA,IAAAwG,EAAAxM,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,IAAAA,UAAA,GAEAyM,EAAAH,EAAAxQ,QAAAkK,GACAuC,EAAA+D,EAAAvD,MAAA0D,EAAA,GAAAC,OAAAJ,EAAAvD,MAAA,EAAA0D,IACA,OAAAD,EAAAjE,EAAAoE,UAAApE,EAGA,IAAAqE,GACAC,KAAA,OACAC,UAAA,YACAC,iBAAA,oBA0LA,SAAAC,EAAAC,EAAAjF,EAAAF,EAAAoF,GACA,IAAAtK,GAAA,EAAA,GAKAuK,GAAA,KAAA,QAAA,QAAArR,QAAAoR,GAIAE,EAAAH,EAAAjG,MAAA,WAAAX,IAAA,SAAAgH,GACA,OAAAA,EAAAC,SAKAC,EAAAH,EAAAtR,QAAAwM,EAAA8E,EAAA,SAAAC,GACA,OAAA,IAAAA,EAAAG,OAAA,WAGAJ,EAAAG,KAAA,IAAAH,EAAAG,GAAAzR,QAAA,MACAuN,QAAAC,KAAA,gFAKA,IAAAmE,EAAA,cACAC,GAAA,IAAAH,GAAAH,EAAArE,MAAA,EAAAwE,GAAAb,QAAAU,EAAAG,GAAAvG,MAAAyG,GAAA,MAAAL,EAAAG,GAAAvG,MAAAyG,GAAA,IAAAf,OAAAU,EAAArE,MAAAwE,EAAA,MAAAH,GAqCA,OAlCAM,EAAAA,EAAArH,IAAA,SAAAsH,EAAAlB,GAEA,IAAArE,GAAA,IAAAqE,GAAAU,EAAAA,GAAA,SAAA,QACAS,GAAA,EACA,OAAAD,EAGAE,OAAA,SAAApH,EAAAC,GACA,MAAA,KAAAD,EAAAA,EAAA9K,OAAA,KAAA,KAAA,IAAA,KAAAG,QAAA4K,IACAD,EAAAA,EAAA9K,OAAA,GAAA+K,EACAkH,GAAA,EACAnH,GACAmH,GACAnH,EAAAA,EAAA9K,OAAA,IAAA+K,EACAkH,GAAA,EACAnH,GAEAA,EAAAiG,OAAAhG,QAIAL,IAAA,SAAAyH,GACA,OAxGA,SAAAA,EAAA1F,EAAAJ,EAAAF,GAEA,IAAAd,EAAA8G,EAAA3E,MAAA,6BACA7G,GAAA0E,EAAA,GACA4E,EAAA5E,EAAA,GAGA,IAAA1E,EACA,OAAAwL,EAGA,GAAA,IAAAlC,EAAA9P,QAAA,KAAA,CACA,IAAAe,OAAA,EACA,OAAA+O,GACA,IAAA,KACA/O,EAAAmL,EACA,MACA,IAAA,IACA,IAAA,KACA,QACAnL,EAAAiL,EAGA,IAAA5E,EAAAP,EAAA9F,GACA,OAAAqG,EAAAkF,GAAA,IAAA9F,EACA,GAAA,OAAAsJ,GAAA,OAAAA,EAAA,CAQA,OALA,OAAAA,EACA/K,KAAAC,IAAAvF,SAAA+C,gBAAAmF,aAAAnI,OAAAmK,aAAA,GAEA5E,KAAAC,IAAAvF,SAAA+C,gBAAAkF,YAAAlI,OAAAkK,YAAA,IAEA,IAAAlD,EAIA,OAAAA,EAmEAyL,CAAAD,EAAA1F,EAAAJ,EAAAF,QAKAsB,QAAA,SAAAuE,EAAAlB,GACAkB,EAAAvE,QAAA,SAAAiE,EAAAW,GACAzC,EAAA8B,KACAzK,EAAA6J,IAAAY,GAAA,MAAAM,EAAAK,EAAA,IAAA,EAAA,QAIApL,EA2OA,IAAA+F,GASAsF,OAEAlP,MAAA,IAEAwK,SAAA,EAEArN,GA9HA,SAAA0M,GACA,IAAA5C,EAAA4C,EAAA5C,UACAkH,EAAAlH,EAAAgB,MAAA,KAAA,GACAkH,EAAAlI,EAAAgB,MAAA,KAAA,GAGA,GAAAkH,EAAA,CACA,IAAAC,EAAAvF,EAAAhG,QACAsC,EAAAiJ,EAAAjJ,UACAD,EAAAkJ,EAAAlJ,OAEAmJ,GAAA,KAAA,SAAA,OAAAtS,QAAAoR,GACAnN,EAAAqO,EAAA,OAAA,MACAhG,EAAAgG,EAAA,QAAA,SAEAC,GACAlP,MAAA6C,KAAAjC,EAAAmF,EAAAnF,IACAX,IAAA4C,KAAAjC,EAAAmF,EAAAnF,GAAAmF,EAAAkD,GAAAnD,EAAAmD,KAGAQ,EAAAhG,QAAAqC,OAAA1C,KAAA0C,EAAAoJ,EAAAH,IAGA,OAAAtF,IAgJAqE,QAEAlO,MAAA,IAEAwK,SAAA,EAEArN,GA7RA,SAAA0M,EAAArC,GACA,IAAA0G,EAAA1G,EAAA0G,OACAjH,EAAA4C,EAAA5C,UACAmI,EAAAvF,EAAAhG,QACAqC,EAAAkJ,EAAAlJ,OACAC,EAAAiJ,EAAAjJ,UAEAgI,EAAAlH,EAAAgB,MAAA,KAAA,GAEApE,OAAA,EAEAA,EADA2I,GAAA0B,KACAA,EAAA,GAEAD,EAAAC,EAAAhI,EAAAC,EAAAgI,GAGA,SAAAA,GACAjI,EAAAjC,KAAAJ,EAAA,GACAqC,EAAAnC,MAAAF,EAAA,IACA,UAAAsK,GACAjI,EAAAjC,KAAAJ,EAAA,GACAqC,EAAAnC,MAAAF,EAAA,IACA,QAAAsK,GACAjI,EAAAnC,MAAAF,EAAA,GACAqC,EAAAjC,KAAAJ,EAAA,IACA,WAAAsK,IACAjI,EAAAnC,MAAAF,EAAA,GACAqC,EAAAjC,KAAAJ,EAAA,IAIA,OADAgG,EAAA3D,OAAAA,EACA2D,GAkQAqE,OAAA,GAoBAqB,iBAEAvP,MAAA,IAEAwK,SAAA,EAEArN,GAlRA,SAAA0M,EAAA0B,GACA,IAAAlF,EAAAkF,EAAAlF,mBAAA/G,EAAAuK,EAAAxH,SAAA6D,QAKA2D,EAAAxH,SAAA8D,YAAAE,IACAA,EAAA/G,EAAA+G,IAMA,IAAAmJ,EAAA3E,EAAA,aACA4E,EAAA5F,EAAAxH,SAAA6D,OAAAkF,MACAnH,EAAAwL,EAAAxL,IACAF,EAAA0L,EAAA1L,KACA2L,EAAAD,EAAAD,GAEAC,EAAAxL,IAAA,GACAwL,EAAA1L,KAAA,GACA0L,EAAAD,GAAA,GAEA,IAAAlJ,EAAAL,EAAA4D,EAAAxH,SAAA6D,OAAA2D,EAAAxH,SAAA8D,UAAAoF,EAAAnF,QAAAC,EAAAwD,EAAA8F,eAIAF,EAAAxL,IAAAA,EACAwL,EAAA1L,KAAAA,EACA0L,EAAAD,GAAAE,EAEAnE,EAAAjF,WAAAA,EAEA,IAAAtG,EAAAuL,EAAAqE,SACA1J,EAAA2D,EAAAhG,QAAAqC,OAEAuD,GACAoG,QAAA,SAAA5I,GACA,IAAA1D,EAAA2C,EAAAe,GAIA,OAHAf,EAAAe,GAAAX,EAAAW,KAAAsE,EAAAuE,sBACAvM,EAAAzB,KAAAC,IAAAmE,EAAAe,GAAAX,EAAAW,KAEAhE,KAAAgE,EAAA1D,IAEAwM,UAAA,SAAA9I,GACA,IAAAkC,EAAA,UAAAlC,EAAA,OAAA,MACA1D,EAAA2C,EAAAiD,GAIA,OAHAjD,EAAAe,GAAAX,EAAAW,KAAAsE,EAAAuE,sBACAvM,EAAAzB,KAAAkO,IAAA9J,EAAAiD,GAAA7C,EAAAW,IAAA,UAAAA,EAAAf,EAAA/D,MAAA+D,EAAAhE,UAEAe,KAAAkG,EAAA5F,KAWA,OAPAvD,EAAAqK,QAAA,SAAApD,GACA,IAAAjG,GAAA,KAAA,OAAA,OAAAjE,QAAAkK,GAAA,UAAA,YACAf,EAAA1C,KAAA0C,EAAAuD,EAAAzI,GAAAiG,MAGA4C,EAAAhG,QAAAqC,OAAAA,EAEA2D,GA2NA+F,UAAA,OAAA,QAAA,MAAA,UAOAxJ,QAAA,EAMAC,kBAAA,gBAYA4J,cAEAjQ,MAAA,IAEAwK,SAAA,EAEArN,GAlgBA,SAAA0M,GACA,IAAAuF,EAAAvF,EAAAhG,QACAqC,EAAAkJ,EAAAlJ,OACAC,EAAAiJ,EAAAjJ,UAEAc,EAAA4C,EAAA5C,UAAAgB,MAAA,KAAA,GACAiI,EAAApO,KAAAoO,MACAb,GAAA,KAAA,MAAA,UAAAtS,QAAAkK,GACAjG,EAAAqO,EAAA,QAAA,SACAc,EAAAd,EAAA,OAAA,MACAhG,EAAAgG,EAAA,QAAA,SAEAnJ,EAAAlF,GAAAkP,EAAA/J,EAAAgK,MACAtG,EAAAhG,QAAAqC,OAAAiK,GAAAD,EAAA/J,EAAAgK,IAAAjK,EAAAmD,IAEAnD,EAAAiK,GAAAD,EAAA/J,EAAAnF,MACA6I,EAAAhG,QAAAqC,OAAAiK,GAAAD,EAAA/J,EAAAnF,KAGA,OAAA6I,IA4fAuG,OAEApQ,MAAA,IAEAwK,SAAA,EAEArN,GA7wBA,SAAA0M,EAAA0B,GACA,IAAA8E,EAGA,IAAAtD,EAAAlD,EAAAxH,SAAAuH,UAAA,QAAA,gBACA,OAAAC,EAGA,IAAAyG,EAAA/E,EAAAzN,QAGA,GAAA,iBAAAwS,GAIA,KAHAA,EAAAzG,EAAAxH,SAAA6D,OAAAqK,cAAAD,IAIA,OAAAzG,OAKA,IAAAA,EAAAxH,SAAA6D,OAAAvF,SAAA2P,GAEA,OADAhG,QAAAC,KAAA,iEACAV,EAIA,IAAA5C,EAAA4C,EAAA5C,UAAAgB,MAAA,KAAA,GACAmH,EAAAvF,EAAAhG,QACAqC,EAAAkJ,EAAAlJ,OACAC,EAAAiJ,EAAAjJ,UAEAkJ,GAAA,KAAA,OAAA,SAAAtS,QAAAkK,GAEAuJ,EAAAnB,EAAA,SAAA,QACAoB,EAAApB,EAAA,MAAA,OACArO,EAAAyP,EAAAC,cACAC,EAAAtB,EAAA,OAAA,MACAc,EAAAd,EAAA,SAAA,QACAuB,EAAAvI,EAAAiI,GAAAE,GAQArK,EAAAgK,GAAAS,EAAA1K,EAAAlF,KACA6I,EAAAhG,QAAAqC,OAAAlF,IAAAkF,EAAAlF,IAAAmF,EAAAgK,GAAAS,IAGAzK,EAAAnF,GAAA4P,EAAA1K,EAAAiK,KACAtG,EAAAhG,QAAAqC,OAAAlF,IAAAmF,EAAAnF,GAAA4P,EAAA1K,EAAAiK,IAEAtG,EAAAhG,QAAAqC,OAAAtC,EAAAiG,EAAAhG,QAAAqC,QAGA,IAAA2K,EAAA1K,EAAAnF,GAAAmF,EAAAqK,GAAA,EAAAI,EAAA,EAIAzS,EAAAN,EAAAgM,EAAAxH,SAAA6D,QACA4K,EAAAnP,WAAAxD,EAAA,SAAAsS,GAAA,IACAM,EAAApP,WAAAxD,EAAA,SAAAsS,EAAA,SAAA,IACAO,EAAAH,EAAAhH,EAAAhG,QAAAqC,OAAAlF,GAAA8P,EAAAC,EAQA,OALAC,EAAAlP,KAAAC,IAAAD,KAAAkO,IAAA9J,EAAAsK,GAAAI,EAAAI,GAAA,GAEAnH,EAAAyG,aAAAA,EACAzG,EAAAhG,QAAAuM,OAAAnN,EAAAoN,KAAArP,EAAAc,KAAAmP,MAAAD,IAAA/N,EAAAoN,EAAAM,EAAA,IAAAN,GAEAxG,GAusBA/L,QAAA,aAcAoT,MAEAlR,MAAA,IAEAwK,SAAA,EAEArN,GAroBA,SAAA0M,EAAA0B,GAEA,GAAAd,EAAAZ,EAAAxH,SAAAuH,UAAA,SACA,OAAAC,EAGA,GAAAA,EAAAsH,SAAAtH,EAAA5C,YAAA4C,EAAAuH,kBAEA,OAAAvH,EAGA,IAAAvD,EAAAL,EAAA4D,EAAAxH,SAAA6D,OAAA2D,EAAAxH,SAAA8D,UAAAoF,EAAAnF,QAAAmF,EAAAlF,kBAAAwD,EAAA8F,eAEA1I,EAAA4C,EAAA5C,UAAAgB,MAAA,KAAA,GACAoJ,EAAA3I,EAAAzB,GACAe,EAAA6B,EAAA5C,UAAAgB,MAAA,KAAA,IAAA,GAEAqJ,KAEA,OAAA/F,EAAAgG,UACA,KAAA1D,EAAAC,KACAwD,GAAArK,EAAAoK,GACA,MACA,KAAAxD,EAAAE,UACAuD,EAAA9D,EAAAvG,GACA,MACA,KAAA4G,EAAAG,iBACAsD,EAAA9D,EAAAvG,GAAA,GACA,MACA,QACAqK,EAAA/F,EAAAgG,SAkDA,OA/CAD,EAAAjH,QAAA,SAAAmH,EAAA9D,GACA,GAAAzG,IAAAuK,GAAAF,EAAA1U,SAAA8Q,EAAA,EACA,OAAA7D,EAGA5C,EAAA4C,EAAA5C,UAAAgB,MAAA,KAAA,GACAoJ,EAAA3I,EAAAzB,GAEA,IAAAgC,EAAAY,EAAAhG,QAAAqC,OACAuL,EAAA5H,EAAAhG,QAAAsC,UAGA+J,EAAApO,KAAAoO,MACAwB,EAAA,SAAAzK,GAAAiJ,EAAAjH,EAAAnF,OAAAoM,EAAAuB,EAAA1N,OAAA,UAAAkD,GAAAiJ,EAAAjH,EAAAlF,MAAAmM,EAAAuB,EAAA3N,QAAA,QAAAmD,GAAAiJ,EAAAjH,EAAAjF,QAAAkM,EAAAuB,EAAAxN,MAAA,WAAAgD,GAAAiJ,EAAAjH,EAAAhF,KAAAiM,EAAAuB,EAAAzN,QAEA2N,EAAAzB,EAAAjH,EAAAlF,MAAAmM,EAAA5J,EAAAvC,MACA6N,EAAA1B,EAAAjH,EAAAnF,OAAAoM,EAAA5J,EAAAxC,OACA+N,EAAA3B,EAAAjH,EAAAhF,KAAAiM,EAAA5J,EAAArC,KACA6N,EAAA5B,EAAAjH,EAAAjF,QAAAkM,EAAA5J,EAAAtC,QAEA+N,EAAA,SAAA9K,GAAA0K,GAAA,UAAA1K,GAAA2K,GAAA,QAAA3K,GAAA4K,GAAA,WAAA5K,GAAA6K,EAGAzC,GAAA,KAAA,MAAA,UAAAtS,QAAAkK,GACA+K,IAAAzG,EAAA0G,iBAAA5C,GAAA,UAAArH,GAAA2J,GAAAtC,GAAA,QAAArH,GAAA4J,IAAAvC,GAAA,UAAArH,GAAA6J,IAAAxC,GAAA,QAAArH,GAAA8J,IAEAJ,GAAAK,GAAAC,KAEAnI,EAAAsH,SAAA,GAEAO,GAAAK,KACA9K,EAAAqK,EAAA5D,EAAA,IAGAsE,IACAhK,EAhJA,SAAAA,GACA,MAAA,QAAAA,EACA,QACA,UAAAA,EACA,MAEAA,EA0IAkK,CAAAlK,IAGA6B,EAAA5C,UAAAA,GAAAe,EAAA,IAAAA,EAAA,IAIA6B,EAAAhG,QAAAqC,OAAA1C,KAAAqG,EAAAhG,QAAAqC,OAAA4C,EAAAe,EAAAxH,SAAA6D,OAAA2D,EAAAhG,QAAAsC,UAAA0D,EAAA5C,YAEA4C,EAAAF,EAAAE,EAAAxH,SAAAuH,UAAAC,EAAA,WAGAA,GA4jBA0H,SAAA,OAKAnL,QAAA,EAOAC,kBAAA,YAUA8L,OAEAnS,MAAA,IAEAwK,SAAA,EAEArN,GArPA,SAAA0M,GACA,IAAA5C,EAAA4C,EAAA5C,UACAkH,EAAAlH,EAAAgB,MAAA,KAAA,GACAmH,EAAAvF,EAAAhG,QACAqC,EAAAkJ,EAAAlJ,OACAC,EAAAiJ,EAAAjJ,UAEA+C,GAAA,KAAA,OAAA,SAAAnM,QAAAoR,GAEAiE,GAAA,KAAA,MAAA,QAAArV,QAAAoR,GAOA,OALAjI,EAAAgD,EAAA,OAAA,OAAA/C,EAAAgI,IAAAiE,EAAAlM,EAAAgD,EAAA,QAAA,UAAA,GAEAW,EAAA5C,UAAAyB,EAAAzB,GACA4C,EAAAhG,QAAAqC,OAAAtC,EAAAsC,GAEA2D,IAkPAwI,MAEArS,MAAA,IAEAwK,SAAA,EAEArN,GA9SA,SAAA0M,GACA,IAAAkD,EAAAlD,EAAAxH,SAAAuH,UAAA,OAAA,mBACA,OAAAC,EAGA,IAAA3C,EAAA2C,EAAAhG,QAAAsC,UACAmM,EAAA/I,EAAAM,EAAAxH,SAAAuH,UAAA,SAAAhE,GACA,MAAA,oBAAAA,EAAAgF,OACAtE,WAEA,GAAAY,EAAAlD,OAAAsO,EAAArO,KAAAiD,EAAAnD,KAAAuO,EAAAxO,OAAAoD,EAAAjD,IAAAqO,EAAAtO,QAAAkD,EAAApD,MAAAwO,EAAAvO,KAAA,CAEA,IAAA,IAAA8F,EAAAwI,KACA,OAAAxI,EAGAA,EAAAwI,MAAA,EACAxI,EAAA0I,WAAA,uBAAA,OACA,CAEA,IAAA,IAAA1I,EAAAwI,KACA,OAAAxI,EAGAA,EAAAwI,MAAA,EACAxI,EAAA0I,WAAA,wBAAA,EAGA,OAAA1I,IAoSA2I,cAEAxS,MAAA,IAEAwK,SAAA,EAEArN,GA/+BA,SAAA0M,EAAA0B,GACA,IAAAjD,EAAAiD,EAAAjD,EACAE,EAAA+C,EAAA/C,EACAtC,EAAA2D,EAAAhG,QAAAqC,OAIAuM,EAAAlJ,EAAAM,EAAAxH,SAAAuH,UAAA,SAAAhE,GACA,MAAA,eAAAA,EAAAgF,OACA8H,qBACAxR,IAAAuR,GACAnI,QAAAC,KAAA,iIAEA,IAAAmI,OAAAxR,IAAAuR,EAAAA,EAAAlH,EAAAmH,gBAEAjT,EAAAH,EAAAuK,EAAAxH,SAAA6D,QACAyM,EAAAzO,EAAAzE,GAGA8B,GACAqR,SAAA1M,EAAA0M,UAGA/O,EAzDA,SAAAgG,EAAAgJ,GACA,IAAAzD,EAAAvF,EAAAhG,QACAqC,EAAAkJ,EAAAlJ,OACAC,EAAAiJ,EAAAjJ,UAGAkJ,GAAA,KAAA,OAAA,SAAAtS,QAAA8M,EAAA5C,WACA6L,GAAA,IAAAjJ,EAAA5C,UAAAlK,QAAA,KACAgW,EAAA5M,EAAAhE,MAAA,GAAA+D,EAAA/D,MAAA,EACA6Q,EAAA7M,EAAAhE,MAAA,GAAA,GAAA+D,EAAA/D,MAAA,GAAA,EACA8Q,EAAA,SAAAC,GACA,OAAAA,GAGAC,EAAAN,EAAAxD,GAAAyD,GAAAC,EAAAjR,KAAAmP,MAAAnP,KAAAoO,MAAA+C,EACAG,EAAAP,EAAA/Q,KAAAmP,MAAAgC,EAEA,OACAlP,KAAAoP,EAAAH,IAAAF,GAAAD,EAAA3M,EAAAnC,KAAA,EAAAmC,EAAAnC,MACAE,IAAAmP,EAAAlN,EAAAjC,KACAD,OAAAoP,EAAAlN,EAAAlC,QACAF,MAAAqP,EAAAjN,EAAApC,QAoCAuP,CAAAxJ,EAAAtN,OAAA+W,iBAAA,IAAAxG,GAEArL,EAAA,WAAA6G,EAAA,MAAA,SACA5G,EAAA,UAAA8G,EAAA,OAAA,QAKA+K,EAAA1I,EAAA,aAWA9G,OAAA,EACAE,OAAA,EAKAA,EAJA,WAAAxC,EAGA,SAAAhC,EAAAnB,UACAmB,EAAAiF,aAAAb,EAAAG,QAEA2O,EAAAzQ,OAAA2B,EAAAG,OAGAH,EAAAI,IAIAF,EAFA,UAAArC,EACA,SAAAjC,EAAAnB,UACAmB,EAAAgF,YAAAZ,EAAAC,OAEA6O,EAAAxQ,MAAA0B,EAAAC,MAGAD,EAAAE,KAEA,GAAA2O,GAAAa,EACAhS,EAAAgS,GAAA,eAAAxP,EAAA,OAAAE,EAAA,SACA1C,EAAAE,GAAA,EACAF,EAAAG,GAAA,EACAH,EAAAiS,WAAA,gBACA,CAEA,IAAAC,EAAA,WAAAhS,GAAA,EAAA,EACAiS,EAAA,UAAAhS,GAAA,EAAA,EACAH,EAAAE,GAAAwC,EAAAwP,EACAlS,EAAAG,GAAAqC,EAAA2P,EACAnS,EAAAiS,WAAA/R,EAAA,KAAAC,EAIA,IAAA6Q,GACAoB,cAAA9J,EAAA5C,WAQA,OAJA4C,EAAA0I,WAAA/O,KAAA+O,EAAA1I,EAAA0I,YACA1I,EAAAtI,OAAAiC,KAAAjC,EAAAsI,EAAAtI,QACAsI,EAAA+J,YAAApQ,KAAAqG,EAAAhG,QAAAuM,MAAAvG,EAAA+J,aAEA/J,GA65BA6I,iBAAA,EAMApK,EAAA,SAMAE,EAAA,SAkBAqL,YAEA7T,MAAA,IAEAwK,SAAA,EAEArN,GA7nCA,SAAA0M,GAKA+C,EAAA/C,EAAAxH,SAAA6D,OAAA2D,EAAAtI,QAzBAzD,EA6BA+L,EAAAxH,SAAA6D,OA7BAqM,EA6BA1I,EAAA0I,WA5BAvP,OAAAqE,KAAAkL,GAAAlI,QAAA,SAAAJ,GACA,IAAA1G,EAAAgP,EAAAtI,IACA,IAAA1G,EACAzF,EAAAgW,aAAA7J,EAAAsI,EAAAtI,IAEAnM,EAAAiW,gBAAA9J,KA0BAJ,EAAAyG,cAAAtN,OAAAqE,KAAAwC,EAAA+J,aAAAhX,QACAgQ,EAAA/C,EAAAyG,aAAAzG,EAAA+J,aAjCA,IAAA9V,EAAAyU,EAoCA,OAAA1I,GA+mCAmK,OAlmCA,SAAA7N,EAAAD,EAAAqF,EAAA0I,EAAA9L,GAEA,IAAAY,EAAAb,EAAAC,EAAAjC,EAAAC,EAAAoF,EAAAoE,eAKA1I,EAAAD,EAAAuE,EAAAtE,UAAA8B,EAAA7C,EAAAC,EAAAoF,EAAA3B,UAAAsH,KAAA7K,kBAAAkF,EAAA3B,UAAAsH,KAAA9K,SAQA,OANAF,EAAA4N,aAAA,cAAA7M,GAIA2F,EAAA1G,GAAA0M,SAAArH,EAAAoE,cAAA,QAAA,aAEApE,GA0lCAmH,qBAAAxR,IAuCAgT,GAKAjN,UAAA,SAMA0I,eAAA,EAMAzD,eAAA,EAOAiI,iBAAA,EAQAC,SAAA,aAUAC,SAAA,aAOAzK,UAAAA,GAeA0K,EAAA,WASA,SAAAA,EAAAnO,EAAAD,GACA,IAAAqO,EAAAnI,KAEAb,EAAAtK,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,MACAmB,EAAAgK,KAAAkI,GAEAlI,KAAAE,eAAA,WACA,OAAAkI,sBAAAD,EAAAE,SAIArI,KAAAqI,OAAAvX,EAAAkP,KAAAqI,OAAAC,KAAAtI,OAGAA,KAAAb,QAAA/H,KAAA8Q,EAAAJ,SAAA3I,GAGAa,KAAAjE,OACAwM,aAAA,EACAC,WAAA,EACA7I,kBAIAK,KAAAjG,UAAAA,GAAAA,EAAA0O,OAAA1O,EAAA,GAAAA,EACAiG,KAAAlG,OAAAA,GAAAA,EAAA2O,OAAA3O,EAAA,GAAAA,EAGAkG,KAAAb,QAAA3B,aACA5G,OAAAqE,KAAA7D,KAAA8Q,EAAAJ,SAAAtK,UAAA2B,EAAA3B,YAAAS,QAAA,SAAAO,GACA2J,EAAAhJ,QAAA3B,UAAAgB,GAAApH,KAAA8Q,EAAAJ,SAAAtK,UAAAgB,OAAAW,EAAA3B,UAAA2B,EAAA3B,UAAAgB,SAIAwB,KAAAxC,UAAA5G,OAAAqE,KAAA+E,KAAAb,QAAA3B,WAAAtC,IAAA,SAAAsD,GACA,OAAApH,GACAoH,KAAAA,GACA2J,EAAAhJ,QAAA3B,UAAAgB,MAGAnD,KAAA,SAAAC,EAAAC,GACA,OAAAD,EAAA1H,MAAA2H,EAAA3H,QAOAoM,KAAAxC,UAAAS,QAAA,SAAA4J,GACAA,EAAAzJ,SAAA/M,EAAAwW,EAAAD,SACAC,EAAAD,OAAAO,EAAApO,UAAAoO,EAAArO,OAAAqO,EAAAhJ,QAAA0I,EAAAM,EAAApM,SAKAiE,KAAAqI,SAEA,IAAAvI,EAAAE,KAAAb,QAAAW,cACAA,GAEAE,KAAA0I,uBAGA1I,KAAAjE,MAAA+D,cAAAA,EAqDA,OA9CA1J,EAAA8R,IACApR,IAAA,SACAK,MAAA,WACA,OAlkDA,WAEA,GAAA6I,KAAAjE,MAAAwM,YACA,OAGA,IAAA9K,GACAxH,SAAA+J,KACA7K,UACAqS,eACArB,cACApB,SAAA,EACAtN,YAIAgG,EAAAhG,QAAAsC,UAAA+B,EAAAkE,KAAAjE,MAAAiE,KAAAlG,OAAAkG,KAAAjG,UAAAiG,KAAAb,QAAAoE,eAKA9F,EAAA5C,UAAAD,EAAAoF,KAAAb,QAAAtE,UAAA4C,EAAAhG,QAAAsC,UAAAiG,KAAAlG,OAAAkG,KAAAjG,UAAAiG,KAAAb,QAAA3B,UAAAsH,KAAA7K,kBAAA+F,KAAAb,QAAA3B,UAAAsH,KAAA9K,SAGAyD,EAAAuH,kBAAAvH,EAAA5C,UAEA4C,EAAA8F,cAAAvD,KAAAb,QAAAoE,cAGA9F,EAAAhG,QAAAqC,OAAA4C,EAAAsD,KAAAlG,OAAA2D,EAAAhG,QAAAsC,UAAA0D,EAAA5C,WAEA4C,EAAAhG,QAAAqC,OAAA0M,SAAAxG,KAAAb,QAAAoE,cAAA,QAAA,WAGA9F,EAAAF,EAAAyC,KAAAxC,UAAAC,GAIAuC,KAAAjE,MAAAyM,UAIAxI,KAAAb,QAAA8I,SAAAxK,IAHAuC,KAAAjE,MAAAyM,WAAA,EACAxI,KAAAb,QAAA6I,SAAAvK,KA0hDAjM,KAAAwO,SAGAlJ,IAAA,UACAK,MAAA,WACA,OAj/CA,WACA6I,KAAAjE,MAAAwM,aAAA,EAGAlK,EAAA2B,KAAAxC,UAAA,gBACAwC,KAAAlG,OAAA6N,gBAAA,eACA3H,KAAAlG,OAAAkF,MAAAwH,SAAA,GACAxG,KAAAlG,OAAAkF,MAAAnH,IAAA,GACAmI,KAAAlG,OAAAkF,MAAArH,KAAA,GACAqI,KAAAlG,OAAAkF,MAAAtH,MAAA,GACAsI,KAAAlG,OAAAkF,MAAApH,OAAA,GACAoI,KAAAlG,OAAAkF,MAAAoI,WAAA,GACApH,KAAAlG,OAAAkF,MAAAP,EAAA,cAAA,IAGAuB,KAAAD,wBAIAC,KAAAb,QAAA4I,iBACA/H,KAAAlG,OAAA3H,WAAAwW,YAAA3I,KAAAlG,QAEA,OAAAkG,MA29CAxO,KAAAwO,SAGAlJ,IAAA,uBACAK,MAAA,WACA,OA96CA,WACA6I,KAAAjE,MAAA+D,gBACAE,KAAAjE,MAAAmD,EAAAc,KAAAjG,UAAAiG,KAAAb,QAAAa,KAAAjE,MAAAiE,KAAAE,kBA46CA1O,KAAAwO,SAGAlJ,IAAA,wBACAK,MAAA,WACA,OAAA4I,EAAAvO,KAAAwO,UA4BAkI,EA7HA,GA4JA,OAPAA,EAAAU,OAAA,oBAAAzY,OAAAA,OAAA0Y,QAAAC,YACAZ,EAAAhH,WAAAA,EACAgH,EAAAJ,SAAAA,EAGA7X,EAAA8Y,GAAA9Y,EAAA8Y,OAEA9Y,EAAA8Y,GAAAb,OAAAA,IAKAlY,EAAA,uBACA,YACA,SAAAkY,GACA,OAAAA,IAEAlY,EAAA,kBAAA,uBAAA,SAAAgZ,GAAA,OAAAA","file":"../skylark-popper.js","sourcesContent":["define('skylark-popper/Popper',[\r\n  \"skylark-langx/skylark\"\r\n], function(skylark) {\r\n  'use strict';\r\n\r\n  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\r\n  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\r\n  var timeoutDuration = 0;\r\n  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\r\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\r\n      timeoutDuration = 1;\r\n      break;\r\n    }\r\n  }\r\n\r\n  function microtaskDebounce(fn) {\r\n    var called = false;\r\n    return function () {\r\n      if (called) {\r\n        return;\r\n      }\r\n      called = true;\r\n      window.Promise.resolve().then(function () {\r\n        called = false;\r\n        fn();\r\n      });\r\n    };\r\n  }\r\n\r\n  function taskDebounce(fn) {\r\n    var scheduled = false;\r\n    return function () {\r\n      if (!scheduled) {\r\n        scheduled = true;\r\n        setTimeout(function () {\r\n          scheduled = false;\r\n          fn();\r\n        }, timeoutDuration);\r\n      }\r\n    };\r\n  }\r\n\r\n  var supportsMicroTasks = isBrowser && window.Promise;\r\n\r\n  /**\r\n  * Create a debounced version of a method, that's asynchronously deferred\r\n  * but called in the minimum time possible.\r\n  *\r\n  * @method\r\n  * @memberof Popper.Utils\r\n  * @argument {Function} fn\r\n  * @returns {Function}\r\n  */\r\n  var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\r\n\r\n  /**\r\n   * Check if the given variable is a function\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Any} functionToCheck - variable to check\r\n   * @returns {Boolean} answer to: is a function?\r\n   */\r\n  function isFunction(functionToCheck) {\r\n    var getType = {};\r\n    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\r\n  }\r\n\r\n  /**\r\n   * Get CSS computed property of the given element\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Eement} element\r\n   * @argument {String} property\r\n   */\r\n  function getStyleComputedProperty(element, property) {\r\n    if (element.nodeType !== 1) {\r\n      return [];\r\n    }\r\n    // NOTE: 1 DOM access here\r\n    var window = element.ownerDocument.defaultView;\r\n    var css = window.getComputedStyle(element, null);\r\n    return property ? css[property] : css;\r\n  }\r\n\r\n  /**\r\n   * Returns the parentNode or the host of the element\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Element} element\r\n   * @returns {Element} parent\r\n   */\r\n  function getParentNode(element) {\r\n    if (element.nodeName === 'HTML') {\r\n      return element;\r\n    }\r\n    return element.parentNode || element.host;\r\n  }\r\n\r\n  /**\r\n   * Returns the scrolling parent of the given element\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Element} element\r\n   * @returns {Element} scroll parent\r\n   */\r\n  function getScrollParent(element) {\r\n    // Return body, `getScroll` will take care to get the correct `scrollTop` from it\r\n    if (!element) {\r\n      return document.body;\r\n    }\r\n\r\n    switch (element.nodeName) {\r\n      case 'HTML':\r\n      case 'BODY':\r\n        return element.ownerDocument.body;\r\n      case '#document':\r\n        return element.body;\r\n    }\r\n\r\n    // Firefox want us to check `-x` and `-y` variations as well\r\n\r\n    var _getStyleComputedProp = getStyleComputedProperty(element),\r\n        overflow = _getStyleComputedProp.overflow,\r\n        overflowX = _getStyleComputedProp.overflowX,\r\n        overflowY = _getStyleComputedProp.overflowY;\r\n\r\n    if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\r\n      return element;\r\n    }\r\n\r\n    return getScrollParent(getParentNode(element));\r\n  }\r\n\r\n  var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\r\n  var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\r\n\r\n  /**\r\n   * Determines if the browser is Internet Explorer\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @param {Number} version to check\r\n   * @returns {Boolean} isIE\r\n   */\r\n  function isIE(version) {\r\n    if (version === 11) {\r\n      return isIE11;\r\n    }\r\n    if (version === 10) {\r\n      return isIE10;\r\n    }\r\n    return isIE11 || isIE10;\r\n  }\r\n\r\n  /**\r\n   * Returns the offset parent of the given element\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Element} element\r\n   * @returns {Element} offset parent\r\n   */\r\n  function getOffsetParent(element) {\r\n    if (!element) {\r\n      return document.documentElement;\r\n    }\r\n\r\n    var noOffsetParent = isIE(10) ? document.body : null;\r\n\r\n    // NOTE: 1 DOM access here\r\n    var offsetParent = element.offsetParent || null;\r\n    // Skip hidden elements which don't have an offsetParent\r\n    while (offsetParent === noOffsetParent && element.nextElementSibling) {\r\n      offsetParent = (element = element.nextElementSibling).offsetParent;\r\n    }\r\n\r\n    var nodeName = offsetParent && offsetParent.nodeName;\r\n\r\n    if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\r\n      return element ? element.ownerDocument.documentElement : document.documentElement;\r\n    }\r\n\r\n    // .offsetParent will return the closest TH, TD or TABLE in case\r\n    // no offsetParent is present, I hate this job...\r\n    if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\r\n      return getOffsetParent(offsetParent);\r\n    }\r\n\r\n    return offsetParent;\r\n  }\r\n\r\n  function isOffsetContainer(element) {\r\n    var nodeName = element.nodeName;\r\n\r\n    if (nodeName === 'BODY') {\r\n      return false;\r\n    }\r\n    return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\r\n  }\r\n\r\n  /**\r\n   * Finds the root node (document, shadowDOM root) of the given element\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Element} node\r\n   * @returns {Element} root node\r\n   */\r\n  function getRoot(node) {\r\n    if (node.parentNode !== null) {\r\n      return getRoot(node.parentNode);\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Finds the offset parent common to the two provided nodes\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Element} element1\r\n   * @argument {Element} element2\r\n   * @returns {Element} common offset parent\r\n   */\r\n  function findCommonOffsetParent(element1, element2) {\r\n    // This check is needed to avoid errors in case one of the elements isn't defined for any reason\r\n    if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\r\n      return document.documentElement;\r\n    }\r\n\r\n    // Here we make sure to give as \"start\" the element that comes first in the DOM\r\n    var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\r\n    var start = order ? element1 : element2;\r\n    var end = order ? element2 : element1;\r\n\r\n    // Get common ancestor container\r\n    var range = document.createRange();\r\n    range.setStart(start, 0);\r\n    range.setEnd(end, 0);\r\n    var commonAncestorContainer = range.commonAncestorContainer;\r\n\r\n    // Both nodes are inside #document\r\n\r\n    if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\r\n      if (isOffsetContainer(commonAncestorContainer)) {\r\n        return commonAncestorContainer;\r\n      }\r\n\r\n      return getOffsetParent(commonAncestorContainer);\r\n    }\r\n\r\n    // one of the nodes is inside shadowDOM, find which one\r\n    var element1root = getRoot(element1);\r\n    if (element1root.host) {\r\n      return findCommonOffsetParent(element1root.host, element2);\r\n    } else {\r\n      return findCommonOffsetParent(element1, getRoot(element2).host);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the scroll value of the given element in the given side (top and left)\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Element} element\r\n   * @argument {String} side `top` or `left`\r\n   * @returns {number} amount of scrolled pixels\r\n   */\r\n  function getScroll(element) {\r\n    var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\r\n\r\n    var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\r\n    var nodeName = element.nodeName;\r\n\r\n    if (nodeName === 'BODY' || nodeName === 'HTML') {\r\n      var html = element.ownerDocument.documentElement;\r\n      var scrollingElement = element.ownerDocument.scrollingElement || html;\r\n      return scrollingElement[upperSide];\r\n    }\r\n\r\n    return element[upperSide];\r\n  }\r\n\r\n  /*\r\n   * Sum or subtract the element scroll values (left and top) from a given rect object\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @param {Object} rect - Rect object you want to change\r\n   * @param {HTMLElement} element - The element from the function reads the scroll values\r\n   * @param {Boolean} subtract - set to true if you want to subtract the scroll values\r\n   * @return {Object} rect - The modifier rect object\r\n   */\r\n  function includeScroll(rect, element) {\r\n    var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n\r\n    var scrollTop = getScroll(element, 'top');\r\n    var scrollLeft = getScroll(element, 'left');\r\n    var modifier = subtract ? -1 : 1;\r\n    rect.top += scrollTop * modifier;\r\n    rect.bottom += scrollTop * modifier;\r\n    rect.left += scrollLeft * modifier;\r\n    rect.right += scrollLeft * modifier;\r\n    return rect;\r\n  }\r\n\r\n  /*\r\n   * Helper to detect borders of a given element\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @param {CSSStyleDeclaration} styles\r\n   * Result of `getStyleComputedProperty` on the given element\r\n   * @param {String} axis - `x` or `y`\r\n   * @return {number} borders - The borders size of the given axis\r\n   */\r\n\r\n  function getBordersSize(styles, axis) {\r\n    var sideA = axis === 'x' ? 'Left' : 'Top';\r\n    var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\r\n\r\n    return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);\r\n  }\r\n\r\n  function getSize(axis, body, html, computedStyle) {\r\n    return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\r\n  }\r\n\r\n  function getWindowSizes(document) {\r\n    var body = document.body;\r\n    var html = document.documentElement;\r\n    var computedStyle = isIE(10) && getComputedStyle(html);\r\n\r\n    return {\r\n      height: getSize('Height', body, html, computedStyle),\r\n      width: getSize('Width', body, html, computedStyle)\r\n    };\r\n  }\r\n\r\n  var classCallCheck = function (instance, Constructor) {\r\n    if (!(instance instanceof Constructor)) {\r\n      throw new TypeError(\"Cannot call a class as a function\");\r\n    }\r\n  };\r\n\r\n  var createClass = function () {\r\n    function defineProperties(target, props) {\r\n      for (var i = 0; i < props.length; i++) {\r\n        var descriptor = props[i];\r\n        descriptor.enumerable = descriptor.enumerable || false;\r\n        descriptor.configurable = true;\r\n        if (\"value\" in descriptor) descriptor.writable = true;\r\n        Object.defineProperty(target, descriptor.key, descriptor);\r\n      }\r\n    }\r\n\r\n    return function (Constructor, protoProps, staticProps) {\r\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\r\n      if (staticProps) defineProperties(Constructor, staticProps);\r\n      return Constructor;\r\n    };\r\n  }();\r\n\r\n\r\n\r\n\r\n\r\n  var defineProperty = function (obj, key, value) {\r\n    if (key in obj) {\r\n      Object.defineProperty(obj, key, {\r\n        value: value,\r\n        enumerable: true,\r\n        configurable: true,\r\n        writable: true\r\n      });\r\n    } else {\r\n      obj[key] = value;\r\n    }\r\n\r\n    return obj;\r\n  };\r\n\r\n  var _extends = Object.assign || function (target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    return target;\r\n  };\r\n\r\n  /**\r\n   * Given element offsets, generate an output similar to getBoundingClientRect\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Object} offsets\r\n   * @returns {Object} ClientRect like output\r\n   */\r\n  function getClientRect(offsets) {\r\n    return _extends({}, offsets, {\r\n      right: offsets.left + offsets.width,\r\n      bottom: offsets.top + offsets.height\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get bounding client rect of given element\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @param {HTMLElement} element\r\n   * @return {Object} client rect\r\n   */\r\n  function getBoundingClientRect(element) {\r\n    var rect = {};\r\n\r\n    // IE10 10 FIX: Please, don't ask, the element isn't\r\n    // considered in DOM in some circumstances...\r\n    // This isn't reproducible in IE10 compatibility mode of IE11\r\n    try {\r\n      if (isIE(10)) {\r\n        rect = element.getBoundingClientRect();\r\n        var scrollTop = getScroll(element, 'top');\r\n        var scrollLeft = getScroll(element, 'left');\r\n        rect.top += scrollTop;\r\n        rect.left += scrollLeft;\r\n        rect.bottom += scrollTop;\r\n        rect.right += scrollLeft;\r\n      } else {\r\n        rect = element.getBoundingClientRect();\r\n      }\r\n    } catch (e) {}\r\n\r\n    var result = {\r\n      left: rect.left,\r\n      top: rect.top,\r\n      width: rect.right - rect.left,\r\n      height: rect.bottom - rect.top\r\n    };\r\n\r\n    // subtract scrollbar size from sizes\r\n    var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\r\n    var width = sizes.width || element.clientWidth || result.right - result.left;\r\n    var height = sizes.height || element.clientHeight || result.bottom - result.top;\r\n\r\n    var horizScrollbar = element.offsetWidth - width;\r\n    var vertScrollbar = element.offsetHeight - height;\r\n\r\n    // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\r\n    // we make this check conditional for performance reasons\r\n    if (horizScrollbar || vertScrollbar) {\r\n      var styles = getStyleComputedProperty(element);\r\n      horizScrollbar -= getBordersSize(styles, 'x');\r\n      vertScrollbar -= getBordersSize(styles, 'y');\r\n\r\n      result.width -= horizScrollbar;\r\n      result.height -= vertScrollbar;\r\n    }\r\n\r\n    return getClientRect(result);\r\n  }\r\n\r\n  function getOffsetRectRelativeToArbitraryNode(children, parent) {\r\n    var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n\r\n    var isIE10 = isIE(10);\r\n    var isHTML = parent.nodeName === 'HTML';\r\n    var childrenRect = getBoundingClientRect(children);\r\n    var parentRect = getBoundingClientRect(parent);\r\n    var scrollParent = getScrollParent(children);\r\n\r\n    var styles = getStyleComputedProperty(parent);\r\n    var borderTopWidth = parseFloat(styles.borderTopWidth, 10);\r\n    var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\r\n\r\n    // In cases where the parent is fixed, we must ignore negative scroll in offset calc\r\n    if (fixedPosition && isHTML) {\r\n      parentRect.top = Math.max(parentRect.top, 0);\r\n      parentRect.left = Math.max(parentRect.left, 0);\r\n    }\r\n    var offsets = getClientRect({\r\n      top: childrenRect.top - parentRect.top - borderTopWidth,\r\n      left: childrenRect.left - parentRect.left - borderLeftWidth,\r\n      width: childrenRect.width,\r\n      height: childrenRect.height\r\n    });\r\n    offsets.marginTop = 0;\r\n    offsets.marginLeft = 0;\r\n\r\n    // Subtract margins of documentElement in case it's being used as parent\r\n    // we do this only on HTML because it's the only element that behaves\r\n    // differently when margins are applied to it. The margins are included in\r\n    // the box of the documentElement, in the other cases not.\r\n    if (!isIE10 && isHTML) {\r\n      var marginTop = parseFloat(styles.marginTop, 10);\r\n      var marginLeft = parseFloat(styles.marginLeft, 10);\r\n\r\n      offsets.top -= borderTopWidth - marginTop;\r\n      offsets.bottom -= borderTopWidth - marginTop;\r\n      offsets.left -= borderLeftWidth - marginLeft;\r\n      offsets.right -= borderLeftWidth - marginLeft;\r\n\r\n      // Attach marginTop and marginLeft because in some circumstances we may need them\r\n      offsets.marginTop = marginTop;\r\n      offsets.marginLeft = marginLeft;\r\n    }\r\n\r\n    if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\r\n      offsets = includeScroll(offsets, parent);\r\n    }\r\n\r\n    return offsets;\r\n  }\r\n\r\n  function getViewportOffsetRectRelativeToArtbitraryNode(element) {\r\n    var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n\r\n    var html = element.ownerDocument.documentElement;\r\n    var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\r\n    var width = Math.max(html.clientWidth, window.innerWidth || 0);\r\n    var height = Math.max(html.clientHeight, window.innerHeight || 0);\r\n\r\n    var scrollTop = !excludeScroll ? getScroll(html) : 0;\r\n    var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\r\n\r\n    var offset = {\r\n      top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\r\n      left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\r\n      width: width,\r\n      height: height\r\n    };\r\n\r\n    return getClientRect(offset);\r\n  }\r\n\r\n  /**\r\n   * Check if the given element is fixed or is inside a fixed parent\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Element} element\r\n   * @argument {Element} customContainer\r\n   * @returns {Boolean} answer to \"isFixed?\"\r\n   */\r\n  function isFixed(element) {\r\n    var nodeName = element.nodeName;\r\n    if (nodeName === 'BODY' || nodeName === 'HTML') {\r\n      return false;\r\n    }\r\n    if (getStyleComputedProperty(element, 'position') === 'fixed') {\r\n      return true;\r\n    }\r\n    return isFixed(getParentNode(element));\r\n  }\r\n\r\n  /**\r\n   * Finds the first parent of an element that has a transformed property defined\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Element} element\r\n   * @returns {Element} first transformed parent or documentElement\r\n   */\r\n\r\n  function getFixedPositionOffsetParent(element) {\r\n    // This check is needed to avoid errors in case one of the elements isn't defined for any reason\r\n    if (!element || !element.parentElement || isIE()) {\r\n      return document.documentElement;\r\n    }\r\n    var el = element.parentElement;\r\n    while (el && getStyleComputedProperty(el, 'transform') === 'none') {\r\n      el = el.parentElement;\r\n    }\r\n    return el || document.documentElement;\r\n  }\r\n\r\n  /**\r\n   * Computed the boundaries limits and return them\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @param {HTMLElement} popper\r\n   * @param {HTMLElement} reference\r\n   * @param {number} padding\r\n   * @param {HTMLElement} boundariesElement - Element used to define the boundaries\r\n   * @param {Boolean} fixedPosition - Is in fixed position mode\r\n   * @returns {Object} Coordinates of the boundaries\r\n   */\r\n  function getBoundaries(popper, reference, padding, boundariesElement) {\r\n    var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\r\n\r\n    // NOTE: 1 DOM access here\r\n\r\n    var boundaries = { top: 0, left: 0 };\r\n    var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\r\n\r\n    // Handle viewport case\r\n    if (boundariesElement === 'viewport') {\r\n      boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\r\n    } else {\r\n      // Handle other cases based on DOM element used as boundaries\r\n      var boundariesNode = void 0;\r\n      if (boundariesElement === 'scrollParent') {\r\n        boundariesNode = getScrollParent(getParentNode(reference));\r\n        if (boundariesNode.nodeName === 'BODY') {\r\n          boundariesNode = popper.ownerDocument.documentElement;\r\n        }\r\n      } else if (boundariesElement === 'window') {\r\n        boundariesNode = popper.ownerDocument.documentElement;\r\n      } else {\r\n        boundariesNode = boundariesElement;\r\n      }\r\n\r\n      var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\r\n\r\n      // In case of HTML, we need a different computation\r\n      if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\r\n        var _getWindowSizes = getWindowSizes(popper.ownerDocument),\r\n            height = _getWindowSizes.height,\r\n            width = _getWindowSizes.width;\r\n\r\n        boundaries.top += offsets.top - offsets.marginTop;\r\n        boundaries.bottom = height + offsets.top;\r\n        boundaries.left += offsets.left - offsets.marginLeft;\r\n        boundaries.right = width + offsets.left;\r\n      } else {\r\n        // for all the other DOM elements, this one is good\r\n        boundaries = offsets;\r\n      }\r\n    }\r\n\r\n    // Add paddings\r\n    padding = padding || 0;\r\n    var isPaddingNumber = typeof padding === 'number';\r\n    boundaries.left += isPaddingNumber ? padding : padding.left || 0;\r\n    boundaries.top += isPaddingNumber ? padding : padding.top || 0;\r\n    boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\r\n    boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\r\n\r\n    return boundaries;\r\n  }\r\n\r\n  function getArea(_ref) {\r\n    var width = _ref.width,\r\n        height = _ref.height;\r\n\r\n    return width * height;\r\n  }\r\n\r\n  /**\r\n   * Utility used to transform the `auto` placement to the placement with more\r\n   * available space.\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Object} data - The data object generated by update method\r\n   * @argument {Object} options - Modifiers configuration and options\r\n   * @returns {Object} The data object, properly modified\r\n   */\r\n  function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\r\n    var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\r\n\r\n    if (placement.indexOf('auto') === -1) {\r\n      return placement;\r\n    }\r\n\r\n    var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\r\n\r\n    var rects = {\r\n      top: {\r\n        width: boundaries.width,\r\n        height: refRect.top - boundaries.top\r\n      },\r\n      right: {\r\n        width: boundaries.right - refRect.right,\r\n        height: boundaries.height\r\n      },\r\n      bottom: {\r\n        width: boundaries.width,\r\n        height: boundaries.bottom - refRect.bottom\r\n      },\r\n      left: {\r\n        width: refRect.left - boundaries.left,\r\n        height: boundaries.height\r\n      }\r\n    };\r\n\r\n    var sortedAreas = Object.keys(rects).map(function (key) {\r\n      return _extends({\r\n        key: key\r\n      }, rects[key], {\r\n        area: getArea(rects[key])\r\n      });\r\n    }).sort(function (a, b) {\r\n      return b.area - a.area;\r\n    });\r\n\r\n    var filteredAreas = sortedAreas.filter(function (_ref2) {\r\n      var width = _ref2.width,\r\n          height = _ref2.height;\r\n      return width >= popper.clientWidth && height >= popper.clientHeight;\r\n    });\r\n\r\n    var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\r\n\r\n    var variation = placement.split('-')[1];\r\n\r\n    return computedPlacement + (variation ? '-' + variation : '');\r\n  }\r\n\r\n  /**\r\n   * Get offsets to the reference element\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @param {Object} state\r\n   * @param {Element} popper - the popper element\r\n   * @param {Element} reference - the reference element (the popper will be relative to this)\r\n   * @param {Element} fixedPosition - is in fixed position mode\r\n   * @returns {Object} An object containing the offsets which will be applied to the popper\r\n   */\r\n  function getReferenceOffsets(state, popper, reference) {\r\n    var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\r\n\r\n    var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\r\n    return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\r\n  }\r\n\r\n  /**\r\n   * Get the outer sizes of the given element (offset size + margins)\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Element} element\r\n   * @returns {Object} object containing width and height properties\r\n   */\r\n  function getOuterSizes(element) {\r\n    var window = element.ownerDocument.defaultView;\r\n    var styles = window.getComputedStyle(element);\r\n    var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\r\n    var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\r\n    var result = {\r\n      width: element.offsetWidth + y,\r\n      height: element.offsetHeight + x\r\n    };\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the opposite placement of the given one\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {String} placement\r\n   * @returns {String} flipped placement\r\n   */\r\n  function getOppositePlacement(placement) {\r\n    var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\r\n    return placement.replace(/left|right|bottom|top/g, function (matched) {\r\n      return hash[matched];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get offsets to the popper\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @param {Object} position - CSS position the Popper will get applied\r\n   * @param {HTMLElement} popper - the popper element\r\n   * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\r\n   * @param {String} placement - one of the valid placement options\r\n   * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\r\n   */\r\n  function getPopperOffsets(popper, referenceOffsets, placement) {\r\n    placement = placement.split('-')[0];\r\n\r\n    // Get popper node sizes\r\n    var popperRect = getOuterSizes(popper);\r\n\r\n    // Add position, width and height to our offsets object\r\n    var popperOffsets = {\r\n      width: popperRect.width,\r\n      height: popperRect.height\r\n    };\r\n\r\n    // depending by the popper placement we have to compute its offsets slightly differently\r\n    var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\r\n    var mainSide = isHoriz ? 'top' : 'left';\r\n    var secondarySide = isHoriz ? 'left' : 'top';\r\n    var measurement = isHoriz ? 'height' : 'width';\r\n    var secondaryMeasurement = !isHoriz ? 'height' : 'width';\r\n\r\n    popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\r\n    if (placement === secondarySide) {\r\n      popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\r\n    } else {\r\n      popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\r\n    }\r\n\r\n    return popperOffsets;\r\n  }\r\n\r\n  /**\r\n   * Mimics the `find` method of Array\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Array} arr\r\n   * @argument prop\r\n   * @argument value\r\n   * @returns index or -1\r\n   */\r\n  function find(arr, check) {\r\n    // use native find if supported\r\n    if (Array.prototype.find) {\r\n      return arr.find(check);\r\n    }\r\n\r\n    // use `filter` to obtain the same behavior of `find`\r\n    return arr.filter(check)[0];\r\n  }\r\n\r\n  /**\r\n   * Return the index of the matching object\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Array} arr\r\n   * @argument prop\r\n   * @argument value\r\n   * @returns index or -1\r\n   */\r\n  function findIndex(arr, prop, value) {\r\n    // use native findIndex if supported\r\n    if (Array.prototype.findIndex) {\r\n      return arr.findIndex(function (cur) {\r\n        return cur[prop] === value;\r\n      });\r\n    }\r\n\r\n    // use `find` + `indexOf` if `findIndex` isn't supported\r\n    var match = find(arr, function (obj) {\r\n      return obj[prop] === value;\r\n    });\r\n    return arr.indexOf(match);\r\n  }\r\n\r\n  /**\r\n   * Loop trough the list of modifiers and run them in order,\r\n   * each of them will then edit the data object.\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @param {dataObject} data\r\n   * @param {Array} modifiers\r\n   * @param {String} ends - Optional modifier name used as stopper\r\n   * @returns {dataObject}\r\n   */\r\n  function runModifiers(modifiers, data, ends) {\r\n    var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\r\n\r\n    modifiersToRun.forEach(function (modifier) {\r\n      if (modifier['function']) {\r\n        // eslint-disable-line dot-notation\r\n        console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\r\n      }\r\n      var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\r\n      if (modifier.enabled && isFunction(fn)) {\r\n        // Add properties to offsets to make them a complete clientRect object\r\n        // we do this before each modifier to make sure the previous one doesn't\r\n        // mess with these values\r\n        data.offsets.popper = getClientRect(data.offsets.popper);\r\n        data.offsets.reference = getClientRect(data.offsets.reference);\r\n\r\n        data = fn(data, modifier);\r\n      }\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the popper, computing the new offsets and applying\r\n   * the new style.<br />\r\n   * Prefer `scheduleUpdate` over `update` because of performance reasons.\r\n   * @method\r\n   * @memberof Popper\r\n   */\r\n  function update() {\r\n    // if popper is destroyed, don't perform any further update\r\n    if (this.state.isDestroyed) {\r\n      return;\r\n    }\r\n\r\n    var data = {\r\n      instance: this,\r\n      styles: {},\r\n      arrowStyles: {},\r\n      attributes: {},\r\n      flipped: false,\r\n      offsets: {}\r\n    };\r\n\r\n    // compute reference element offsets\r\n    data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\r\n\r\n    // compute auto placement, store placement inside the data object,\r\n    // modifiers will be able to edit `placement` if needed\r\n    // and refer to originalPlacement to know the original value\r\n    data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\r\n\r\n    // store the computed placement inside `originalPlacement`\r\n    data.originalPlacement = data.placement;\r\n\r\n    data.positionFixed = this.options.positionFixed;\r\n\r\n    // compute the popper offsets\r\n    data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\r\n\r\n    data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\r\n\r\n    // run the modifiers\r\n    data = runModifiers(this.modifiers, data);\r\n\r\n    // the first `update` will call `onCreate` callback\r\n    // the other ones will call `onUpdate` callback\r\n    if (!this.state.isCreated) {\r\n      this.state.isCreated = true;\r\n      this.options.onCreate(data);\r\n    } else {\r\n      this.options.onUpdate(data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper used to know if the given modifier is enabled.\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @returns {Boolean}\r\n   */\r\n  function isModifierEnabled(modifiers, modifierName) {\r\n    return modifiers.some(function (_ref) {\r\n      var name = _ref.name,\r\n          enabled = _ref.enabled;\r\n      return enabled && name === modifierName;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the prefixed supported property name\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {String} property (camelCase)\r\n   * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\r\n   */\r\n  function getSupportedPropertyName(property) {\r\n    var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\r\n    var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\r\n\r\n    for (var i = 0; i < prefixes.length; i++) {\r\n      var prefix = prefixes[i];\r\n      var toCheck = prefix ? '' + prefix + upperProp : property;\r\n      if (typeof document.body.style[toCheck] !== 'undefined') {\r\n        return toCheck;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Destroys the popper.\r\n   * @method\r\n   * @memberof Popper\r\n   */\r\n  function destroy() {\r\n    this.state.isDestroyed = true;\r\n\r\n    // touch DOM only if `applyStyle` modifier is enabled\r\n    if (isModifierEnabled(this.modifiers, 'applyStyle')) {\r\n      this.popper.removeAttribute('x-placement');\r\n      this.popper.style.position = '';\r\n      this.popper.style.top = '';\r\n      this.popper.style.left = '';\r\n      this.popper.style.right = '';\r\n      this.popper.style.bottom = '';\r\n      this.popper.style.willChange = '';\r\n      this.popper.style[getSupportedPropertyName('transform')] = '';\r\n    }\r\n\r\n    this.disableEventListeners();\r\n\r\n    // remove the popper if user explicity asked for the deletion on destroy\r\n    // do not use `remove` because IE11 doesn't support it\r\n    if (this.options.removeOnDestroy) {\r\n      this.popper.parentNode.removeChild(this.popper);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the window associated with the element\r\n   * @argument {Element} element\r\n   * @returns {Window}\r\n   */\r\n  function getWindow(element) {\r\n    var ownerDocument = element.ownerDocument;\r\n    return ownerDocument ? ownerDocument.defaultView : window;\r\n  }\r\n\r\n  function attachToScrollParents(scrollParent, event, callback, scrollParents) {\r\n    var isBody = scrollParent.nodeName === 'BODY';\r\n    var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\r\n    target.addEventListener(event, callback, { passive: true });\r\n\r\n    if (!isBody) {\r\n      attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\r\n    }\r\n    scrollParents.push(target);\r\n  }\r\n\r\n  /**\r\n   * Setup needed event listeners used to update the popper position\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @private\r\n   */\r\n  function setupEventListeners(reference, options, state, updateBound) {\r\n    // Resize event listener on window\r\n    state.updateBound = updateBound;\r\n    getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\r\n\r\n    // Scroll event listener on scroll parents\r\n    var scrollElement = getScrollParent(reference);\r\n    attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\r\n    state.scrollElement = scrollElement;\r\n    state.eventsEnabled = true;\r\n\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * It will add resize/scroll events and start recalculating\r\n   * position of the popper element when they are triggered.\r\n   * @method\r\n   * @memberof Popper\r\n   */\r\n  function enableEventListeners() {\r\n    if (!this.state.eventsEnabled) {\r\n      this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove event listeners used to update the popper position\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @private\r\n   */\r\n  function removeEventListeners(reference, state) {\r\n    // Remove resize event listener on window\r\n    getWindow(reference).removeEventListener('resize', state.updateBound);\r\n\r\n    // Remove scroll event listener on scroll parents\r\n    state.scrollParents.forEach(function (target) {\r\n      target.removeEventListener('scroll', state.updateBound);\r\n    });\r\n\r\n    // Reset state\r\n    state.updateBound = null;\r\n    state.scrollParents = [];\r\n    state.scrollElement = null;\r\n    state.eventsEnabled = false;\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * It will remove resize/scroll events and won't recalculate popper position\r\n   * when they are triggered. It also won't trigger `onUpdate` callback anymore,\r\n   * unless you call `update` method manually.\r\n   * @method\r\n   * @memberof Popper\r\n   */\r\n  function disableEventListeners() {\r\n    if (this.state.eventsEnabled) {\r\n      cancelAnimationFrame(this.scheduleUpdate);\r\n      this.state = removeEventListeners(this.reference, this.state);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tells if a given input is a number\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @param {*} input to check\r\n   * @return {Boolean}\r\n   */\r\n  function isNumeric(n) {\r\n    return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  /**\r\n   * Set the style to the given popper\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Element} element - Element to apply the style to\r\n   * @argument {Object} styles\r\n   * Object with a list of properties and values which will be applied to the element\r\n   */\r\n  function setStyles(element, styles) {\r\n    Object.keys(styles).forEach(function (prop) {\r\n      var unit = '';\r\n      // add unit if the value is numeric and is one of the following\r\n      if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\r\n        unit = 'px';\r\n      }\r\n      element.style[prop] = styles[prop] + unit;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set the attributes to the given popper\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Element} element - Element to apply the attributes to\r\n   * @argument {Object} styles\r\n   * Object with a list of properties and values which will be applied to the element\r\n   */\r\n  function setAttributes(element, attributes) {\r\n    Object.keys(attributes).forEach(function (prop) {\r\n      var value = attributes[prop];\r\n      if (value !== false) {\r\n        element.setAttribute(prop, attributes[prop]);\r\n      } else {\r\n        element.removeAttribute(prop);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * @memberof Modifiers\r\n   * @argument {Object} data - The data object generated by `update` method\r\n   * @argument {Object} data.styles - List of style properties - values to apply to popper element\r\n   * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\r\n   * @argument {Object} options - Modifiers configuration and options\r\n   * @returns {Object} The same data object\r\n   */\r\n  function applyStyle(data) {\r\n    // any property present in `data.styles` will be applied to the popper,\r\n    // in this way we can make the 3rd party modifiers add custom styles to it\r\n    // Be aware, modifiers could override the properties defined in the previous\r\n    // lines of this modifier!\r\n    setStyles(data.instance.popper, data.styles);\r\n\r\n    // any property present in `data.attributes` will be applied to the popper,\r\n    // they will be set as HTML attributes of the element\r\n    setAttributes(data.instance.popper, data.attributes);\r\n\r\n    // if arrowElement is defined and arrowStyles has some properties\r\n    if (data.arrowElement && Object.keys(data.arrowStyles).length) {\r\n      setStyles(data.arrowElement, data.arrowStyles);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Set the x-placement attribute before everything else because it could be used\r\n   * to add margins to the popper margins needs to be calculated to get the\r\n   * correct popper offsets.\r\n   * @method\r\n   * @memberof Popper.modifiers\r\n   * @param {HTMLElement} reference - The reference element used to position the popper\r\n   * @param {HTMLElement} popper - The HTML element used as popper\r\n   * @param {Object} options - Popper.js options\r\n   */\r\n  function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\r\n    // compute reference element offsets\r\n    var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\r\n\r\n    // compute auto placement, store placement inside the data object,\r\n    // modifiers will be able to edit `placement` if needed\r\n    // and refer to originalPlacement to know the original value\r\n    var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\r\n\r\n    popper.setAttribute('x-placement', placement);\r\n\r\n    // Apply `position` to popper before anything else because\r\n    // without the position applied we can't guarantee correct computations\r\n    setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\r\n\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * @memberof Popper.Utils\r\n   * @argument {Object} data - The data object generated by `update` method\r\n   * @argument {Boolean} shouldRound - If the offsets should be rounded at all\r\n   * @returns {Object} The popper's position offsets rounded\r\n   *\r\n   * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\r\n   * good as it can be within reason.\r\n   * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\r\n   *\r\n   * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\r\n   * as well on High DPI screens).\r\n   *\r\n   * Firefox prefers no rounding for positioning and does not have blurriness on\r\n   * high DPI screens.\r\n   *\r\n   * Only horizontal placement and left/right values need to be considered.\r\n   */\r\n  function getRoundedOffsets(data, shouldRound) {\r\n    var _data$offsets = data.offsets,\r\n        popper = _data$offsets.popper,\r\n        reference = _data$offsets.reference;\r\n\r\n\r\n    var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\r\n    var isVariation = data.placement.indexOf('-') !== -1;\r\n    var sameWidthOddness = reference.width % 2 === popper.width % 2;\r\n    var bothOddWidth = reference.width % 2 === 1 && popper.width % 2 === 1;\r\n    var noRound = function noRound(v) {\r\n      return v;\r\n    };\r\n\r\n    var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthOddness ? Math.round : Math.floor;\r\n    var verticalToInteger = !shouldRound ? noRound : Math.round;\r\n\r\n    return {\r\n      left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\r\n      top: verticalToInteger(popper.top),\r\n      bottom: verticalToInteger(popper.bottom),\r\n      right: horizontalToInteger(popper.right)\r\n    };\r\n  }\r\n\r\n  var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\r\n\r\n  /**\r\n   * @function\r\n   * @memberof Modifiers\r\n   * @argument {Object} data - The data object generated by `update` method\r\n   * @argument {Object} options - Modifiers configuration and options\r\n   * @returns {Object} The data object, properly modified\r\n   */\r\n  function computeStyle(data, options) {\r\n    var x = options.x,\r\n        y = options.y;\r\n    var popper = data.offsets.popper;\r\n\r\n    // Remove this legacy support in Popper.js v2\r\n\r\n    var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\r\n      return modifier.name === 'applyStyle';\r\n    }).gpuAcceleration;\r\n    if (legacyGpuAccelerationOption !== undefined) {\r\n      console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\r\n    }\r\n    var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\r\n\r\n    var offsetParent = getOffsetParent(data.instance.popper);\r\n    var offsetParentRect = getBoundingClientRect(offsetParent);\r\n\r\n    // Styles\r\n    var styles = {\r\n      position: popper.position\r\n    };\r\n\r\n    var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\r\n\r\n    var sideA = x === 'bottom' ? 'top' : 'bottom';\r\n    var sideB = y === 'right' ? 'left' : 'right';\r\n\r\n    // if gpuAcceleration is set to `true` and transform is supported,\r\n    //  we use `translate3d` to apply the position to the popper we\r\n    // automatically use the supported prefixed version if needed\r\n    var prefixedProperty = getSupportedPropertyName('transform');\r\n\r\n    // now, let's make a step back and look at this code closely (wtf?)\r\n    // If the content of the popper grows once it's been positioned, it\r\n    // may happen that the popper gets misplaced because of the new content\r\n    // overflowing its reference element\r\n    // To avoid this problem, we provide two options (x and y), which allow\r\n    // the consumer to define the offset origin.\r\n    // If we position a popper on top of a reference element, we can set\r\n    // `x` to `top` to make the popper grow towards its top instead of\r\n    // its bottom.\r\n    var left = void 0,\r\n        top = void 0;\r\n    if (sideA === 'bottom') {\r\n      // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\r\n      // and not the bottom of the html element\r\n      if (offsetParent.nodeName === 'HTML') {\r\n        top = -offsetParent.clientHeight + offsets.bottom;\r\n      } else {\r\n        top = -offsetParentRect.height + offsets.bottom;\r\n      }\r\n    } else {\r\n      top = offsets.top;\r\n    }\r\n    if (sideB === 'right') {\r\n      if (offsetParent.nodeName === 'HTML') {\r\n        left = -offsetParent.clientWidth + offsets.right;\r\n      } else {\r\n        left = -offsetParentRect.width + offsets.right;\r\n      }\r\n    } else {\r\n      left = offsets.left;\r\n    }\r\n    if (gpuAcceleration && prefixedProperty) {\r\n      styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\r\n      styles[sideA] = 0;\r\n      styles[sideB] = 0;\r\n      styles.willChange = 'transform';\r\n    } else {\r\n      // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\r\n      var invertTop = sideA === 'bottom' ? -1 : 1;\r\n      var invertLeft = sideB === 'right' ? -1 : 1;\r\n      styles[sideA] = top * invertTop;\r\n      styles[sideB] = left * invertLeft;\r\n      styles.willChange = sideA + ', ' + sideB;\r\n    }\r\n\r\n    // Attributes\r\n    var attributes = {\r\n      'x-placement': data.placement\r\n    };\r\n\r\n    // Update `data` attributes, styles and arrowStyles\r\n    data.attributes = _extends({}, attributes, data.attributes);\r\n    data.styles = _extends({}, styles, data.styles);\r\n    data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Helper used to know if the given modifier depends from another one.<br />\r\n   * It checks if the needed modifier is listed and enabled.\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @param {Array} modifiers - list of modifiers\r\n   * @param {String} requestingName - name of requesting modifier\r\n   * @param {String} requestedName - name of requested modifier\r\n   * @returns {Boolean}\r\n   */\r\n  function isModifierRequired(modifiers, requestingName, requestedName) {\r\n    var requesting = find(modifiers, function (_ref) {\r\n      var name = _ref.name;\r\n      return name === requestingName;\r\n    });\r\n\r\n    var isRequired = !!requesting && modifiers.some(function (modifier) {\r\n      return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\r\n    });\r\n\r\n    if (!isRequired) {\r\n      var _requesting = '`' + requestingName + '`';\r\n      var requested = '`' + requestedName + '`';\r\n      console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\r\n    }\r\n    return isRequired;\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * @memberof Modifiers\r\n   * @argument {Object} data - The data object generated by update method\r\n   * @argument {Object} options - Modifiers configuration and options\r\n   * @returns {Object} The data object, properly modified\r\n   */\r\n  function arrow(data, options) {\r\n    var _data$offsets$arrow;\r\n\r\n    // arrow depends on keepTogether in order to work\r\n    if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\r\n      return data;\r\n    }\r\n\r\n    var arrowElement = options.element;\r\n\r\n    // if arrowElement is a string, suppose it's a CSS selector\r\n    if (typeof arrowElement === 'string') {\r\n      arrowElement = data.instance.popper.querySelector(arrowElement);\r\n\r\n      // if arrowElement is not found, don't run the modifier\r\n      if (!arrowElement) {\r\n        return data;\r\n      }\r\n    } else {\r\n      // if the arrowElement isn't a query selector we must check that the\r\n      // provided DOM node is child of its popper node\r\n      if (!data.instance.popper.contains(arrowElement)) {\r\n        console.warn('WARNING: `arrow.element` must be child of its popper element!');\r\n        return data;\r\n      }\r\n    }\r\n\r\n    var placement = data.placement.split('-')[0];\r\n    var _data$offsets = data.offsets,\r\n        popper = _data$offsets.popper,\r\n        reference = _data$offsets.reference;\r\n\r\n    var isVertical = ['left', 'right'].indexOf(placement) !== -1;\r\n\r\n    var len = isVertical ? 'height' : 'width';\r\n    var sideCapitalized = isVertical ? 'Top' : 'Left';\r\n    var side = sideCapitalized.toLowerCase();\r\n    var altSide = isVertical ? 'left' : 'top';\r\n    var opSide = isVertical ? 'bottom' : 'right';\r\n    var arrowElementSize = getOuterSizes(arrowElement)[len];\r\n\r\n    //\r\n    // extends keepTogether behavior making sure the popper and its\r\n    // reference have enough pixels in conjunction\r\n    //\r\n\r\n    // top/left side\r\n    if (reference[opSide] - arrowElementSize < popper[side]) {\r\n      data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\r\n    }\r\n    // bottom/right side\r\n    if (reference[side] + arrowElementSize > popper[opSide]) {\r\n      data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\r\n    }\r\n    data.offsets.popper = getClientRect(data.offsets.popper);\r\n\r\n    // compute center of the popper\r\n    var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\r\n\r\n    // Compute the sideValue using the updated popper offsets\r\n    // take popper margin in account because we don't have this info available\r\n    var css = getStyleComputedProperty(data.instance.popper);\r\n    var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);\r\n    var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);\r\n    var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\r\n\r\n    // prevent arrowElement from being placed not contiguously to its popper\r\n    sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\r\n\r\n    data.arrowElement = arrowElement;\r\n    data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Get the opposite placement variation of the given one\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {String} placement variation\r\n   * @returns {String} flipped placement variation\r\n   */\r\n  function getOppositeVariation(variation) {\r\n    if (variation === 'end') {\r\n      return 'start';\r\n    } else if (variation === 'start') {\r\n      return 'end';\r\n    }\r\n    return variation;\r\n  }\r\n\r\n  /**\r\n   * List of accepted placements to use as values of the `placement` option.<br />\r\n   * Valid placements are:\r\n   * - `auto`\r\n   * - `top`\r\n   * - `right`\r\n   * - `bottom`\r\n   * - `left`\r\n   *\r\n   * Each placement can have a variation from this list:\r\n   * - `-start`\r\n   * - `-end`\r\n   *\r\n   * Variations are interpreted easily if you think of them as the left to right\r\n   * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\r\n   * is right.<br />\r\n   * Vertically (`left` and `right`), `start` is top and `end` is bottom.\r\n   *\r\n   * Some valid examples are:\r\n   * - `top-end` (on top of reference, right aligned)\r\n   * - `right-start` (on right of reference, top aligned)\r\n   * - `bottom` (on bottom, centered)\r\n   * - `auto-end` (on the side with more space available, alignment depends by placement)\r\n   *\r\n   * @static\r\n   * @type {Array}\r\n   * @enum {String}\r\n   * @readonly\r\n   * @method placements\r\n   * @memberof Popper\r\n   */\r\n  var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\r\n\r\n  // Get rid of `auto` `auto-start` and `auto-end`\r\n  var validPlacements = placements.slice(3);\r\n\r\n  /**\r\n   * Given an initial placement, returns all the subsequent placements\r\n   * clockwise (or counter-clockwise).\r\n   *\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {String} placement - A valid placement (it accepts variations)\r\n   * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\r\n   * @returns {Array} placements including their variations\r\n   */\r\n  function clockwise(placement) {\r\n    var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n\r\n    var index = validPlacements.indexOf(placement);\r\n    var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\r\n    return counter ? arr.reverse() : arr;\r\n  }\r\n\r\n  var BEHAVIORS = {\r\n    FLIP: 'flip',\r\n    CLOCKWISE: 'clockwise',\r\n    COUNTERCLOCKWISE: 'counterclockwise'\r\n  };\r\n\r\n  /**\r\n   * @function\r\n   * @memberof Modifiers\r\n   * @argument {Object} data - The data object generated by update method\r\n   * @argument {Object} options - Modifiers configuration and options\r\n   * @returns {Object} The data object, properly modified\r\n   */\r\n  function flip(data, options) {\r\n    // if `inner` modifier is enabled, we can't use the `flip` modifier\r\n    if (isModifierEnabled(data.instance.modifiers, 'inner')) {\r\n      return data;\r\n    }\r\n\r\n    if (data.flipped && data.placement === data.originalPlacement) {\r\n      // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\r\n      return data;\r\n    }\r\n\r\n    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\r\n\r\n    var placement = data.placement.split('-')[0];\r\n    var placementOpposite = getOppositePlacement(placement);\r\n    var variation = data.placement.split('-')[1] || '';\r\n\r\n    var flipOrder = [];\r\n\r\n    switch (options.behavior) {\r\n      case BEHAVIORS.FLIP:\r\n        flipOrder = [placement, placementOpposite];\r\n        break;\r\n      case BEHAVIORS.CLOCKWISE:\r\n        flipOrder = clockwise(placement);\r\n        break;\r\n      case BEHAVIORS.COUNTERCLOCKWISE:\r\n        flipOrder = clockwise(placement, true);\r\n        break;\r\n      default:\r\n        flipOrder = options.behavior;\r\n    }\r\n\r\n    flipOrder.forEach(function (step, index) {\r\n      if (placement !== step || flipOrder.length === index + 1) {\r\n        return data;\r\n      }\r\n\r\n      placement = data.placement.split('-')[0];\r\n      placementOpposite = getOppositePlacement(placement);\r\n\r\n      var popperOffsets = data.offsets.popper;\r\n      var refOffsets = data.offsets.reference;\r\n\r\n      // using floor because the reference offsets may contain decimals we are not going to consider here\r\n      var floor = Math.floor;\r\n      var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\r\n\r\n      var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\r\n      var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\r\n      var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\r\n      var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\r\n\r\n      var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\r\n\r\n      // flip the variation if required\r\n      var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\r\n      var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\r\n\r\n      if (overlapsRef || overflowsBoundaries || flippedVariation) {\r\n        // this boolean to detect any flip loop\r\n        data.flipped = true;\r\n\r\n        if (overlapsRef || overflowsBoundaries) {\r\n          placement = flipOrder[index + 1];\r\n        }\r\n\r\n        if (flippedVariation) {\r\n          variation = getOppositeVariation(variation);\r\n        }\r\n\r\n        data.placement = placement + (variation ? '-' + variation : '');\r\n\r\n        // this object contains `position`, we want to preserve it along with\r\n        // any additional property we may add in the future\r\n        data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\r\n\r\n        data = runModifiers(data.instance.modifiers, data, 'flip');\r\n      }\r\n    });\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * @memberof Modifiers\r\n   * @argument {Object} data - The data object generated by update method\r\n   * @argument {Object} options - Modifiers configuration and options\r\n   * @returns {Object} The data object, properly modified\r\n   */\r\n  function keepTogether(data) {\r\n    var _data$offsets = data.offsets,\r\n        popper = _data$offsets.popper,\r\n        reference = _data$offsets.reference;\r\n\r\n    var placement = data.placement.split('-')[0];\r\n    var floor = Math.floor;\r\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\r\n    var side = isVertical ? 'right' : 'bottom';\r\n    var opSide = isVertical ? 'left' : 'top';\r\n    var measurement = isVertical ? 'width' : 'height';\r\n\r\n    if (popper[side] < floor(reference[opSide])) {\r\n      data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\r\n    }\r\n    if (popper[opSide] > floor(reference[side])) {\r\n      data.offsets.popper[opSide] = floor(reference[side]);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Converts a string containing value + unit into a px value number\r\n   * @function\r\n   * @memberof {modifiers~offset}\r\n   * @private\r\n   * @argument {String} str - Value + unit string\r\n   * @argument {String} measurement - `height` or `width`\r\n   * @argument {Object} popperOffsets\r\n   * @argument {Object} referenceOffsets\r\n   * @returns {Number|String}\r\n   * Value in pixels, or original string if no values were extracted\r\n   */\r\n  function toValue(str, measurement, popperOffsets, referenceOffsets) {\r\n    // separate value from unit\r\n    var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\r\n    var value = +split[1];\r\n    var unit = split[2];\r\n\r\n    // If it's not a number it's an operator, I guess\r\n    if (!value) {\r\n      return str;\r\n    }\r\n\r\n    if (unit.indexOf('%') === 0) {\r\n      var element = void 0;\r\n      switch (unit) {\r\n        case '%p':\r\n          element = popperOffsets;\r\n          break;\r\n        case '%':\r\n        case '%r':\r\n        default:\r\n          element = referenceOffsets;\r\n      }\r\n\r\n      var rect = getClientRect(element);\r\n      return rect[measurement] / 100 * value;\r\n    } else if (unit === 'vh' || unit === 'vw') {\r\n      // if is a vh or vw, we calculate the size based on the viewport\r\n      var size = void 0;\r\n      if (unit === 'vh') {\r\n        size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\r\n      } else {\r\n        size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\r\n      }\r\n      return size / 100 * value;\r\n    } else {\r\n      // if is an explicit pixel unit, we get rid of the unit and keep the value\r\n      // if is an implicit unit, it's px, and we return just the value\r\n      return value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\r\n   * @function\r\n   * @memberof {modifiers~offset}\r\n   * @private\r\n   * @argument {String} offset\r\n   * @argument {Object} popperOffsets\r\n   * @argument {Object} referenceOffsets\r\n   * @argument {String} basePlacement\r\n   * @returns {Array} a two cells array with x and y offsets in numbers\r\n   */\r\n  function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\r\n    var offsets = [0, 0];\r\n\r\n    // Use height if placement is left or right and index is 0 otherwise use width\r\n    // in this way the first offset will use an axis and the second one\r\n    // will use the other one\r\n    var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\r\n\r\n    // Split the offset string to obtain a list of values and operands\r\n    // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\r\n    var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\r\n      return frag.trim();\r\n    });\r\n\r\n    // Detect if the offset string contains a pair of values or a single one\r\n    // they could be separated by comma or space\r\n    var divider = fragments.indexOf(find(fragments, function (frag) {\r\n      return frag.search(/,|\\s/) !== -1;\r\n    }));\r\n\r\n    if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\r\n      console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\r\n    }\r\n\r\n    // If divider is found, we divide the list of values and operands to divide\r\n    // them by ofset X and Y.\r\n    var splitRegex = /\\s*,\\s*|\\s+/;\r\n    var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\r\n\r\n    // Convert the values with units to absolute pixels to allow our computations\r\n    ops = ops.map(function (op, index) {\r\n      // Most of the units rely on the orientation of the popper\r\n      var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\r\n      var mergeWithPrevious = false;\r\n      return op\r\n      // This aggregates any `+` or `-` sign that aren't considered operators\r\n      // e.g.: 10 + +5 => [10, +, +5]\r\n      .reduce(function (a, b) {\r\n        if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\r\n          a[a.length - 1] = b;\r\n          mergeWithPrevious = true;\r\n          return a;\r\n        } else if (mergeWithPrevious) {\r\n          a[a.length - 1] += b;\r\n          mergeWithPrevious = false;\r\n          return a;\r\n        } else {\r\n          return a.concat(b);\r\n        }\r\n      }, [])\r\n      // Here we convert the string values into number values (in px)\r\n      .map(function (str) {\r\n        return toValue(str, measurement, popperOffsets, referenceOffsets);\r\n      });\r\n    });\r\n\r\n    // Loop trough the offsets arrays and execute the operations\r\n    ops.forEach(function (op, index) {\r\n      op.forEach(function (frag, index2) {\r\n        if (isNumeric(frag)) {\r\n          offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\r\n        }\r\n      });\r\n    });\r\n    return offsets;\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * @memberof Modifiers\r\n   * @argument {Object} data - The data object generated by update method\r\n   * @argument {Object} options - Modifiers configuration and options\r\n   * @argument {Number|String} options.offset=0\r\n   * The offset value as described in the modifier description\r\n   * @returns {Object} The data object, properly modified\r\n   */\r\n  function offset(data, _ref) {\r\n    var offset = _ref.offset;\r\n    var placement = data.placement,\r\n        _data$offsets = data.offsets,\r\n        popper = _data$offsets.popper,\r\n        reference = _data$offsets.reference;\r\n\r\n    var basePlacement = placement.split('-')[0];\r\n\r\n    var offsets = void 0;\r\n    if (isNumeric(+offset)) {\r\n      offsets = [+offset, 0];\r\n    } else {\r\n      offsets = parseOffset(offset, popper, reference, basePlacement);\r\n    }\r\n\r\n    if (basePlacement === 'left') {\r\n      popper.top += offsets[0];\r\n      popper.left -= offsets[1];\r\n    } else if (basePlacement === 'right') {\r\n      popper.top += offsets[0];\r\n      popper.left += offsets[1];\r\n    } else if (basePlacement === 'top') {\r\n      popper.left += offsets[0];\r\n      popper.top -= offsets[1];\r\n    } else if (basePlacement === 'bottom') {\r\n      popper.left += offsets[0];\r\n      popper.top += offsets[1];\r\n    }\r\n\r\n    data.popper = popper;\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * @memberof Modifiers\r\n   * @argument {Object} data - The data object generated by `update` method\r\n   * @argument {Object} options - Modifiers configuration and options\r\n   * @returns {Object} The data object, properly modified\r\n   */\r\n  function preventOverflow(data, options) {\r\n    var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\r\n\r\n    // If offsetParent is the reference element, we really want to\r\n    // go one step up and use the next offsetParent as reference to\r\n    // avoid to make this modifier completely useless and look like broken\r\n    if (data.instance.reference === boundariesElement) {\r\n      boundariesElement = getOffsetParent(boundariesElement);\r\n    }\r\n\r\n    // NOTE: DOM access here\r\n    // resets the popper's position so that the document size can be calculated excluding\r\n    // the size of the popper element itself\r\n    var transformProp = getSupportedPropertyName('transform');\r\n    var popperStyles = data.instance.popper.style; // assignment to help minification\r\n    var top = popperStyles.top,\r\n        left = popperStyles.left,\r\n        transform = popperStyles[transformProp];\r\n\r\n    popperStyles.top = '';\r\n    popperStyles.left = '';\r\n    popperStyles[transformProp] = '';\r\n\r\n    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\r\n\r\n    // NOTE: DOM access here\r\n    // restores the original style properties after the offsets have been computed\r\n    popperStyles.top = top;\r\n    popperStyles.left = left;\r\n    popperStyles[transformProp] = transform;\r\n\r\n    options.boundaries = boundaries;\r\n\r\n    var order = options.priority;\r\n    var popper = data.offsets.popper;\r\n\r\n    var check = {\r\n      primary: function primary(placement) {\r\n        var value = popper[placement];\r\n        if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\r\n          value = Math.max(popper[placement], boundaries[placement]);\r\n        }\r\n        return defineProperty({}, placement, value);\r\n      },\r\n      secondary: function secondary(placement) {\r\n        var mainSide = placement === 'right' ? 'left' : 'top';\r\n        var value = popper[mainSide];\r\n        if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\r\n          value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\r\n        }\r\n        return defineProperty({}, mainSide, value);\r\n      }\r\n    };\r\n\r\n    order.forEach(function (placement) {\r\n      var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\r\n      popper = _extends({}, popper, check[side](placement));\r\n    });\r\n\r\n    data.offsets.popper = popper;\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * @memberof Modifiers\r\n   * @argument {Object} data - The data object generated by `update` method\r\n   * @argument {Object} options - Modifiers configuration and options\r\n   * @returns {Object} The data object, properly modified\r\n   */\r\n  function shift(data) {\r\n    var placement = data.placement;\r\n    var basePlacement = placement.split('-')[0];\r\n    var shiftvariation = placement.split('-')[1];\r\n\r\n    // if shift shiftvariation is specified, run the modifier\r\n    if (shiftvariation) {\r\n      var _data$offsets = data.offsets,\r\n          reference = _data$offsets.reference,\r\n          popper = _data$offsets.popper;\r\n\r\n      var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\r\n      var side = isVertical ? 'left' : 'top';\r\n      var measurement = isVertical ? 'width' : 'height';\r\n\r\n      var shiftOffsets = {\r\n        start: defineProperty({}, side, reference[side]),\r\n        end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\r\n      };\r\n\r\n      data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * @memberof Modifiers\r\n   * @argument {Object} data - The data object generated by update method\r\n   * @argument {Object} options - Modifiers configuration and options\r\n   * @returns {Object} The data object, properly modified\r\n   */\r\n  function hide(data) {\r\n    if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\r\n      return data;\r\n    }\r\n\r\n    var refRect = data.offsets.reference;\r\n    var bound = find(data.instance.modifiers, function (modifier) {\r\n      return modifier.name === 'preventOverflow';\r\n    }).boundaries;\r\n\r\n    if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\r\n      // Avoid unnecessary DOM access if visibility hasn't changed\r\n      if (data.hide === true) {\r\n        return data;\r\n      }\r\n\r\n      data.hide = true;\r\n      data.attributes['x-out-of-boundaries'] = '';\r\n    } else {\r\n      // Avoid unnecessary DOM access if visibility hasn't changed\r\n      if (data.hide === false) {\r\n        return data;\r\n      }\r\n\r\n      data.hide = false;\r\n      data.attributes['x-out-of-boundaries'] = false;\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * @memberof Modifiers\r\n   * @argument {Object} data - The data object generated by `update` method\r\n   * @argument {Object} options - Modifiers configuration and options\r\n   * @returns {Object} The data object, properly modified\r\n   */\r\n  function inner(data) {\r\n    var placement = data.placement;\r\n    var basePlacement = placement.split('-')[0];\r\n    var _data$offsets = data.offsets,\r\n        popper = _data$offsets.popper,\r\n        reference = _data$offsets.reference;\r\n\r\n    var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\r\n\r\n    var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\r\n\r\n    popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\r\n\r\n    data.placement = getOppositePlacement(placement);\r\n    data.offsets.popper = getClientRect(popper);\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Modifier function, each modifier can have a function of this type assigned\r\n   * to its `fn` property.<br />\r\n   * These functions will be called on each update, this means that you must\r\n   * make sure they are performant enough to avoid performance bottlenecks.\r\n   *\r\n   * @function ModifierFn\r\n   * @argument {dataObject} data - The data object generated by `update` method\r\n   * @argument {Object} options - Modifiers configuration and options\r\n   * @returns {dataObject} The data object, properly modified\r\n   */\r\n\r\n  /**\r\n   * Modifiers are plugins used to alter the behavior of your poppers.<br />\r\n   * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\r\n   * needed by the library.\r\n   *\r\n   * Usually you don't want to override the `order`, `fn` and `onLoad` props.\r\n   * All the other properties are configurations that could be tweaked.\r\n   * @namespace modifiers\r\n   */\r\n  var modifiers = {\r\n    /**\r\n     * Modifier used to shift the popper on the start or end of its reference\r\n     * element.<br />\r\n     * It will read the variation of the `placement` property.<br />\r\n     * It can be one either `-end` or `-start`.\r\n     * @memberof modifiers\r\n     * @inner\r\n     */\r\n    shift: {\r\n      /** @prop {number} order=100 - Index used to define the order of execution */\r\n      order: 100,\r\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\r\n      enabled: true,\r\n      /** @prop {ModifierFn} */\r\n      fn: shift\r\n    },\r\n\r\n    /**\r\n     * The `offset` modifier can shift your popper on both its axis.\r\n     *\r\n     * It accepts the following units:\r\n     * - `px` or unit-less, interpreted as pixels\r\n     * - `%` or `%r`, percentage relative to the length of the reference element\r\n     * - `%p`, percentage relative to the length of the popper element\r\n     * - `vw`, CSS viewport width unit\r\n     * - `vh`, CSS viewport height unit\r\n     *\r\n     * For length is intended the main axis relative to the placement of the popper.<br />\r\n     * This means that if the placement is `top` or `bottom`, the length will be the\r\n     * `width`. In case of `left` or `right`, it will be the `height`.\r\n     *\r\n     * You can provide a single value (as `Number` or `String`), or a pair of values\r\n     * as `String` divided by a comma or one (or more) white spaces.<br />\r\n     * The latter is a deprecated method because it leads to confusion and will be\r\n     * removed in v2.<br />\r\n     * Additionally, it accepts additions and subtractions between different units.\r\n     * Note that multiplications and divisions aren't supported.\r\n     *\r\n     * Valid examples are:\r\n     * ```\r\n     * 10\r\n     * '10%'\r\n     * '10, 10'\r\n     * '10%, 10'\r\n     * '10 + 10%'\r\n     * '10 - 5vh + 3%'\r\n     * '-10px + 5vh, 5px - 6%'\r\n     * ```\r\n     * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\r\n     * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\r\n     * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\r\n     *\r\n     * @memberof modifiers\r\n     * @inner\r\n     */\r\n    offset: {\r\n      /** @prop {number} order=200 - Index used to define the order of execution */\r\n      order: 200,\r\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\r\n      enabled: true,\r\n      /** @prop {ModifierFn} */\r\n      fn: offset,\r\n      /** @prop {Number|String} offset=0\r\n       * The offset value as described in the modifier description\r\n       */\r\n      offset: 0\r\n    },\r\n\r\n    /**\r\n     * Modifier used to prevent the popper from being positioned outside the boundary.\r\n     *\r\n     * A scenario exists where the reference itself is not within the boundaries.<br />\r\n     * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\r\n     * In this case we need to decide whether the popper should either:\r\n     *\r\n     * - detach from the reference and remain \"trapped\" in the boundaries, or\r\n     * - if it should ignore the boundary and \"escape with its reference\"\r\n     *\r\n     * When `escapeWithReference` is set to`true` and reference is completely\r\n     * outside its boundaries, the popper will overflow (or completely leave)\r\n     * the boundaries in order to remain attached to the edge of the reference.\r\n     *\r\n     * @memberof modifiers\r\n     * @inner\r\n     */\r\n    preventOverflow: {\r\n      /** @prop {number} order=300 - Index used to define the order of execution */\r\n      order: 300,\r\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\r\n      enabled: true,\r\n      /** @prop {ModifierFn} */\r\n      fn: preventOverflow,\r\n      /**\r\n       * @prop {Array} [priority=['left','right','top','bottom']]\r\n       * Popper will try to prevent overflow following these priorities by default,\r\n       * then, it could overflow on the left and on top of the `boundariesElement`\r\n       */\r\n      priority: ['left', 'right', 'top', 'bottom'],\r\n      /**\r\n       * @prop {number} padding=5\r\n       * Amount of pixel used to define a minimum distance between the boundaries\r\n       * and the popper. This makes sure the popper always has a little padding\r\n       * between the edges of its container\r\n       */\r\n      padding: 5,\r\n      /**\r\n       * @prop {String|HTMLElement} boundariesElement='scrollParent'\r\n       * Boundaries used by the modifier. Can be `scrollParent`, `window`,\r\n       * `viewport` or any DOM element.\r\n       */\r\n      boundariesElement: 'scrollParent'\r\n    },\r\n\r\n    /**\r\n     * Modifier used to make sure the reference and its popper stay near each other\r\n     * without leaving any gap between the two. Especially useful when the arrow is\r\n     * enabled and you want to ensure that it points to its reference element.\r\n     * It cares only about the first axis. You can still have poppers with margin\r\n     * between the popper and its reference element.\r\n     * @memberof modifiers\r\n     * @inner\r\n     */\r\n    keepTogether: {\r\n      /** @prop {number} order=400 - Index used to define the order of execution */\r\n      order: 400,\r\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\r\n      enabled: true,\r\n      /** @prop {ModifierFn} */\r\n      fn: keepTogether\r\n    },\r\n\r\n    /**\r\n     * This modifier is used to move the `arrowElement` of the popper to make\r\n     * sure it is positioned between the reference element and its popper element.\r\n     * It will read the outer size of the `arrowElement` node to detect how many\r\n     * pixels of conjunction are needed.\r\n     *\r\n     * It has no effect if no `arrowElement` is provided.\r\n     * @memberof modifiers\r\n     * @inner\r\n     */\r\n    arrow: {\r\n      /** @prop {number} order=500 - Index used to define the order of execution */\r\n      order: 500,\r\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\r\n      enabled: true,\r\n      /** @prop {ModifierFn} */\r\n      fn: arrow,\r\n      /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\r\n      element: '[x-arrow]'\r\n    },\r\n\r\n    /**\r\n     * Modifier used to flip the popper's placement when it starts to overlap its\r\n     * reference element.\r\n     *\r\n     * Requires the `preventOverflow` modifier before it in order to work.\r\n     *\r\n     * **NOTE:** this modifier will interrupt the current update cycle and will\r\n     * restart it if it detects the need to flip the placement.\r\n     * @memberof modifiers\r\n     * @inner\r\n     */\r\n    flip: {\r\n      /** @prop {number} order=600 - Index used to define the order of execution */\r\n      order: 600,\r\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\r\n      enabled: true,\r\n      /** @prop {ModifierFn} */\r\n      fn: flip,\r\n      /**\r\n       * @prop {String|Array} behavior='flip'\r\n       * The behavior used to change the popper's placement. It can be one of\r\n       * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\r\n       * placements (with optional variations)\r\n       */\r\n      behavior: 'flip',\r\n      /**\r\n       * @prop {number} padding=5\r\n       * The popper will flip if it hits the edges of the `boundariesElement`\r\n       */\r\n      padding: 5,\r\n      /**\r\n       * @prop {String|HTMLElement} boundariesElement='viewport'\r\n       * The element which will define the boundaries of the popper position.\r\n       * The popper will never be placed outside of the defined boundaries\r\n       * (except if `keepTogether` is enabled)\r\n       */\r\n      boundariesElement: 'viewport'\r\n    },\r\n\r\n    /**\r\n     * Modifier used to make the popper flow toward the inner of the reference element.\r\n     * By default, when this modifier is disabled, the popper will be placed outside\r\n     * the reference element.\r\n     * @memberof modifiers\r\n     * @inner\r\n     */\r\n    inner: {\r\n      /** @prop {number} order=700 - Index used to define the order of execution */\r\n      order: 700,\r\n      /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\r\n      enabled: false,\r\n      /** @prop {ModifierFn} */\r\n      fn: inner\r\n    },\r\n\r\n    /**\r\n     * Modifier used to hide the popper when its reference element is outside of the\r\n     * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\r\n     * be used to hide with a CSS selector the popper when its reference is\r\n     * out of boundaries.\r\n     *\r\n     * Requires the `preventOverflow` modifier before it in order to work.\r\n     * @memberof modifiers\r\n     * @inner\r\n     */\r\n    hide: {\r\n      /** @prop {number} order=800 - Index used to define the order of execution */\r\n      order: 800,\r\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\r\n      enabled: true,\r\n      /** @prop {ModifierFn} */\r\n      fn: hide\r\n    },\r\n\r\n    /**\r\n     * Computes the style that will be applied to the popper element to gets\r\n     * properly positioned.\r\n     *\r\n     * Note that this modifier will not touch the DOM, it just prepares the styles\r\n     * so that `applyStyle` modifier can apply it. This separation is useful\r\n     * in case you need to replace `applyStyle` with a custom implementation.\r\n     *\r\n     * This modifier has `850` as `order` value to maintain backward compatibility\r\n     * with previous versions of Popper.js. Expect the modifiers ordering method\r\n     * to change in future major versions of the library.\r\n     *\r\n     * @memberof modifiers\r\n     * @inner\r\n     */\r\n    computeStyle: {\r\n      /** @prop {number} order=850 - Index used to define the order of execution */\r\n      order: 850,\r\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\r\n      enabled: true,\r\n      /** @prop {ModifierFn} */\r\n      fn: computeStyle,\r\n      /**\r\n       * @prop {Boolean} gpuAcceleration=true\r\n       * If true, it uses the CSS 3D transformation to position the popper.\r\n       * Otherwise, it will use the `top` and `left` properties\r\n       */\r\n      gpuAcceleration: true,\r\n      /**\r\n       * @prop {string} [x='bottom']\r\n       * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\r\n       * Change this if your popper should grow in a direction different from `bottom`\r\n       */\r\n      x: 'bottom',\r\n      /**\r\n       * @prop {string} [x='left']\r\n       * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\r\n       * Change this if your popper should grow in a direction different from `right`\r\n       */\r\n      y: 'right'\r\n    },\r\n\r\n    /**\r\n     * Applies the computed styles to the popper element.\r\n     *\r\n     * All the DOM manipulations are limited to this modifier. This is useful in case\r\n     * you want to integrate Popper.js inside a framework or view library and you\r\n     * want to delegate all the DOM manipulations to it.\r\n     *\r\n     * Note that if you disable this modifier, you must make sure the popper element\r\n     * has its position set to `absolute` before Popper.js can do its work!\r\n     *\r\n     * Just disable this modifier and define your own to achieve the desired effect.\r\n     *\r\n     * @memberof modifiers\r\n     * @inner\r\n     */\r\n    applyStyle: {\r\n      /** @prop {number} order=900 - Index used to define the order of execution */\r\n      order: 900,\r\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\r\n      enabled: true,\r\n      /** @prop {ModifierFn} */\r\n      fn: applyStyle,\r\n      /** @prop {Function} */\r\n      onLoad: applyStyleOnLoad,\r\n      /**\r\n       * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\r\n       * @prop {Boolean} gpuAcceleration=true\r\n       * If true, it uses the CSS 3D transformation to position the popper.\r\n       * Otherwise, it will use the `top` and `left` properties\r\n       */\r\n      gpuAcceleration: undefined\r\n    }\r\n  };\r\n\r\n  /**\r\n   * The `dataObject` is an object containing all the information used by Popper.js.\r\n   * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\r\n   * @name dataObject\r\n   * @property {Object} data.instance The Popper.js instance\r\n   * @property {String} data.placement Placement applied to popper\r\n   * @property {String} data.originalPlacement Placement originally defined on init\r\n   * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\r\n   * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\r\n   * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\r\n   * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\r\n   * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\r\n   * @property {Object} data.boundaries Offsets of the popper boundaries\r\n   * @property {Object} data.offsets The measurements of popper, reference and arrow elements\r\n   * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\r\n   * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\r\n   * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\r\n   */\r\n\r\n  /**\r\n   * Default options provided to Popper.js constructor.<br />\r\n   * These can be overridden using the `options` argument of Popper.js.<br />\r\n   * To override an option, simply pass an object with the same\r\n   * structure of the `options` object, as the 3rd argument. For example:\r\n   * ```\r\n   * new Popper(ref, pop, {\r\n   *   modifiers: {\r\n   *     preventOverflow: { enabled: false }\r\n   *   }\r\n   * })\r\n   * ```\r\n   * @type {Object}\r\n   * @static\r\n   * @memberof Popper\r\n   */\r\n  var Defaults = {\r\n    /**\r\n     * Popper's placement.\r\n     * @prop {Popper.placements} placement='bottom'\r\n     */\r\n    placement: 'bottom',\r\n\r\n    /**\r\n     * Set this to true if you want popper to position it self in 'fixed' mode\r\n     * @prop {Boolean} positionFixed=false\r\n     */\r\n    positionFixed: false,\r\n\r\n    /**\r\n     * Whether events (resize, scroll) are initially enabled.\r\n     * @prop {Boolean} eventsEnabled=true\r\n     */\r\n    eventsEnabled: true,\r\n\r\n    /**\r\n     * Set to true if you want to automatically remove the popper when\r\n     * you call the `destroy` method.\r\n     * @prop {Boolean} removeOnDestroy=false\r\n     */\r\n    removeOnDestroy: false,\r\n\r\n    /**\r\n     * Callback called when the popper is created.<br />\r\n     * By default, it is set to no-op.<br />\r\n     * Access Popper.js instance with `data.instance`.\r\n     * @prop {onCreate}\r\n     */\r\n    onCreate: function onCreate() {},\r\n\r\n    /**\r\n     * Callback called when the popper is updated. This callback is not called\r\n     * on the initialization/creation of the popper, but only on subsequent\r\n     * updates.<br />\r\n     * By default, it is set to no-op.<br />\r\n     * Access Popper.js instance with `data.instance`.\r\n     * @prop {onUpdate}\r\n     */\r\n    onUpdate: function onUpdate() {},\r\n\r\n    /**\r\n     * List of modifiers used to modify the offsets before they are applied to the popper.\r\n     * They provide most of the functionalities of Popper.js.\r\n     * @prop {modifiers}\r\n     */\r\n    modifiers: modifiers\r\n  };\r\n\r\n  /**\r\n   * @callback onCreate\r\n   * @param {dataObject} data\r\n   */\r\n\r\n  /**\r\n   * @callback onUpdate\r\n   * @param {dataObject} data\r\n   */\r\n\r\n  // Utils\r\n  // Methods\r\n  var Popper = function () {\r\n    /**\r\n     * Creates a new Popper.js instance.\r\n     * @class Popper\r\n     * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\r\n     * @param {HTMLElement} popper - The HTML element used as the popper\r\n     * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\r\n     * @return {Object} instance - The generated Popper.js instance\r\n     */\r\n    function Popper(reference, popper) {\r\n      var _this = this;\r\n\r\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n      classCallCheck(this, Popper);\r\n\r\n      this.scheduleUpdate = function () {\r\n        return requestAnimationFrame(_this.update);\r\n      };\r\n\r\n      // make update() debounced, so that it only runs at most once-per-tick\r\n      this.update = debounce(this.update.bind(this));\r\n\r\n      // with {} we create a new object with the options inside it\r\n      this.options = _extends({}, Popper.Defaults, options);\r\n\r\n      // init state\r\n      this.state = {\r\n        isDestroyed: false,\r\n        isCreated: false,\r\n        scrollParents: []\r\n      };\r\n\r\n      // get reference and popper elements (allow jQuery wrappers)\r\n      this.reference = reference && reference.jquery ? reference[0] : reference;\r\n      this.popper = popper && popper.jquery ? popper[0] : popper;\r\n\r\n      // Deep merge modifiers options\r\n      this.options.modifiers = {};\r\n      Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\r\n        _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\r\n      });\r\n\r\n      // Refactoring modifiers' list (Object => Array)\r\n      this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\r\n        return _extends({\r\n          name: name\r\n        }, _this.options.modifiers[name]);\r\n      })\r\n      // sort the modifiers by order\r\n      .sort(function (a, b) {\r\n        return a.order - b.order;\r\n      });\r\n\r\n      // modifiers have the ability to execute arbitrary code when Popper.js get inited\r\n      // such code is executed in the same order of its modifier\r\n      // they could add new properties to their options configuration\r\n      // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\r\n      this.modifiers.forEach(function (modifierOptions) {\r\n        if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\r\n          modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\r\n        }\r\n      });\r\n\r\n      // fire the first update to position the popper in the right place\r\n      this.update();\r\n\r\n      var eventsEnabled = this.options.eventsEnabled;\r\n      if (eventsEnabled) {\r\n        // setup event listeners, they will take care of update the position in specific situations\r\n        this.enableEventListeners();\r\n      }\r\n\r\n      this.state.eventsEnabled = eventsEnabled;\r\n    }\r\n\r\n    // We can't use class properties because they don't get listed in the\r\n    // class prototype and break stuff like Sinon stubs\r\n\r\n\r\n    createClass(Popper, [{\r\n      key: 'update',\r\n      value: function update$$1() {\r\n        return update.call(this);\r\n      }\r\n    }, {\r\n      key: 'destroy',\r\n      value: function destroy$$1() {\r\n        return destroy.call(this);\r\n      }\r\n    }, {\r\n      key: 'enableEventListeners',\r\n      value: function enableEventListeners$$1() {\r\n        return enableEventListeners.call(this);\r\n      }\r\n    }, {\r\n      key: 'disableEventListeners',\r\n      value: function disableEventListeners$$1() {\r\n        return disableEventListeners.call(this);\r\n      }\r\n\r\n      /**\r\n       * Schedules an update. It will run on the next UI update available.\r\n       * @method scheduleUpdate\r\n       * @memberof Popper\r\n       */\r\n\r\n\r\n      /**\r\n       * Collection of utilities useful when writing custom modifiers.\r\n       * Starting from version 1.7, this method is available only if you\r\n       * include `popper-utils.js` before `popper.js`.\r\n       *\r\n       * **DEPRECATION**: This way to access PopperUtils is deprecated\r\n       * and will be removed in v2! Use the PopperUtils module directly instead.\r\n       * Due to the high instability of the methods contained in Utils, we can't\r\n       * guarantee them to follow semver. Use them at your own risk!\r\n       * @static\r\n       * @private\r\n       * @type {Object}\r\n       * @deprecated since version 1.8\r\n       * @member Utils\r\n       * @memberof Popper\r\n       */\r\n\r\n    }]);\r\n    return Popper;\r\n  }();\r\n\r\n  /**\r\n   * The `referenceObject` is an object that provides an interface compatible with Popper.js\r\n   * and lets you use it as replacement of a real DOM node.<br />\r\n   * You can use this method to position a popper relatively to a set of coordinates\r\n   * in case you don't have a DOM node to use as reference.\r\n   *\r\n   * ```\r\n   * new Popper(referenceObject, popperNode);\r\n   * ```\r\n   *\r\n   * NB: This feature isn't supported in Internet Explorer 10.\r\n   * @name referenceObject\r\n   * @property {Function} data.getBoundingClientRect\r\n   * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\r\n   * @property {number} data.clientWidth\r\n   * An ES6 getter that will return the width of the virtual reference element.\r\n   * @property {number} data.clientHeight\r\n   * An ES6 getter that will return the height of the virtual reference element.\r\n   */\r\n\r\n\r\n  Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\r\n  Popper.placements = placements;\r\n  Popper.Defaults = Defaults;\r\n\r\n\r\n  skylark.ui = skylark.ui || {};\r\n\r\n  return skylark.ui.Popper = Popper;\r\n\r\n});\r\n\r\n\ndefine('skylark-popper/main',[\r\n\t\"./Popper\"\r\n],function(Popper){\r\n\treturn Popper;\r\n});\ndefine('skylark-popper', ['skylark-popper/main'], function (main) { return main; });\n\n"]}